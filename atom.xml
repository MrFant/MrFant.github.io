<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[YII Fant's Blog]]></title>
  <link href="https://mrfant.github.io/atom.xml" rel="self"/>
  <link href="https://mrfant.github.io/"/>
  <updated>2018-09-03T22:03:31+08:00</updated>
  <id>https://mrfant.github.io/</id>
  <author>
    <name><![CDATA[Yii]]></name>
    <email><![CDATA[yii.fant@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MYSQL外键(Foreign Key)的使用例子[转载]]]></title>
    <link href="https://mrfant.github.io/blog/2018/09/03/mysqlwai-jian-foreign-key-de-shi-yong-li-zi/"/>
    <updated>2018-09-03T21:57:23+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/09/03/mysqlwai-jian-foreign-key-de-shi-yong-li-zi</id>
    <content type="html"><![CDATA[<p>原文链接：<a href="http://www.cppblog.com/wolf/articles/69089.html">http://www.cppblog.com/wolf/articles/69089.html</a></p>

<p>在MySQL 3.23.44版本后，InnoDB引擎类型的表支持了外键约束。
外键的使用条件：
1.两个表必须是InnoDB表，MyISAM表暂时不支持外键（据说以后的版本有可能支持，但至少目前不支持）；
2.外键列必须建立了索引，MySQL 4.1.2以后的版本在建立外键时会自动创建索引，但如果在较早的版本则需要显示建立；
3.外键关系的两个表的列必须是数据类型相似，也就是可以相互转换类型的列，比如int和tinyint可以，而int和char则不可以；</p>

<p>外键的好处：可以使得两张表关联，保证数据的一致性和实现一些级联操作；</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Java8 Optional 的正确姿势[转载]]]></title>
    <link href="https://mrfant.github.io/blog/2018/09/03/proper-ways-of-using-java8-optional/"/>
    <updated>2018-09-03T21:52:00+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/09/03/proper-ways-of-using-java8-optional</id>
    <content type="html"><![CDATA[<p>原文链接：<a href="https://yanbin.blog/proper-ways-of-using-java8-optional/">https://yanbin.blog/proper-ways-of-using-java8-optional/</a></p>

<p><a href="http://www.importnew.com/22060.html">http://www.importnew.com/22060.html</a></p>

<!-- more -->


<p>使用 Java8 Optional 的正确姿势
2016/10/23 | 分类： 基础技术 | 1 条评论  | 标签： JAVA8, OPETIONAL
分享到：
原文出处： 隔叶黄莺 Unmi Blog
我们知道 Java 8 增加了一些很有用的 API, 其中一个就是 Optional. 如果对它不稍假探索, 只是轻描淡写的认为它可以优雅的解决 NullPointException 的问题, 于是代码就开始这么写了
Optional<User> user = ……
if (user.isPresent()) {
return user.getOrders();
} else {
return Collections.emptyList();
}
那么不得不说我们的思维仍然是在原地踏步, 只是本能的认为它不过是 User 实例的包装, 这与我们之前写成
User user = …..
if (user != null) {
return user.getOrders();
} else {
return Collections.emptyList();
}
实质上是没有任何分别. 这就是我们将要讲到的使用好 Java 8 Optional 类型的正确姿势.
在里约奥运之时, 新闻一再提起五星红旗有问题, 可是我怎么看都看不出来有什么问题, 后来才道是小星星膜拜中央的姿势不对. 因此我们千万也别对自己习以为常的事情觉得理所当然, 丝毫不会觉得有何不妥, 换句话说也就是当我们切换到 Java 8 的 Optional 时, 不能继承性的对待过往 null 时的那种思维, 应该掌握好新的, 正确的使用 Java 8 Optional 的正确姿势.
直白的讲, 当我们还在以如下几种方式使用 Optional 时, 就得开始检视自己了
1. 调用 isPresent() 方法时
2. 调用 get() 方法时
3. Optional 类型作为类/实例属性时
4. Optional 类型作为方法参数时
isPresent() 与 obj != null 无任何分别, 我们的生活依然在步步惊心. 而没有 isPresent() 作铺垫的 get() 调用在 IntelliJ IDEA 中会收到告警
Reports calls to java.util.Optional.get() without first checking with a isPresent() call if a value is available. If the Optional does not contain a value, get() will throw an exception. (调用 Optional.get() 前不事先用 isPresent() 检查值是否可用. 假如 Optional 不包含一个值, get() 将会抛出一个异常)
把 Optional 类型用作属性或是方法参数在 IntelliJ IDEA 中更是强力不推荐的
Reports any uses of java.util.Optional<T>, java.util.OptionalDouble, java.util.OptionalInt, java.util.OptionalLong or com.google.common.base.Optional as the type for a field or a parameter. Optional was designed to provide a limited mechanism for library method return types where there needed to be a clear way to represent “no result”. Using a field with type java.util.Optional is also problematic if the class needs to be Serializable, which java.util.Optional is not. (使用任何像 Optional 的类型作为字段或方法参数都是不可取的. Optional 只设计为类库方法的, 可明确表示可能无值情况下的返回类型. Optional 类型不可被序列化, 用作字段类型会出问题的)
所以 Optional 中我们真正可依赖的应该是除了 isPresent() 和 get() 的其他方法:
1. public<U> Optional<U> map(Function&lt;? super T, ? extends U> mapper)
2. public T orElse(T other)
3. public T orElseGet(Supplier&lt;? extends T> other)
4. public void ifPresent(Consumer&lt;? super T> consumer)
5. public Optional<T> filter(Predicate&lt;? super T> predicate)
6. public<U> Optional<U> flatMap(Function&lt;? super T, Optional<U>> mapper)
7. public <X extends Throwable> T orElseThrow(Supplier&lt;? extends X> exceptionSupplier) throws X
我略有自信的按照它们大概使用频度对上面的方法排了一下序.
先又不得不提一下 Optional 的三种构造方式: Optional.of(obj),  Optional.ofNullable(obj) 和明确的 Optional.empty()
Optional.of(obj): 它要求传入的 obj 不能是 null 值的, 否则还没开始进入角色就倒在了 NullPointerException 异常上了.
Optional.ofNullable(obj): 它以一种智能的, 宽容的方式来构造一个 Optional 实例. 来者不拒, 传 null 进到就得到 Optional.empty(), 非 null 就调用 Optional.of(obj).
那是不是我们只要用 Optional.ofNullable(obj) 一劳永逸, 以不变应二变的方式来构造 Optional 实例就行了呢? 那也未必, 否则 Optional.of(obj) 何必如此暴露呢, 私有则可?
我本人的观点是:  1. 当我们非常非常的明确将要传给 Optional.of(obj) 的 obj 参数不可能为 null 时, 比如它是一个刚 new 出来的对象(Optional.of(new User(&hellip;))), 或者是一个非 null 常量时;  2. 当想为 obj 断言不为 null 时, 即我们想在万一 obj 为 null 立即报告 NullPointException 异常, 立即修改, 而不是隐藏空指针异常时, 我们就应该果断的用 Optional.of(obj) 来构造 Optional 实例, 而不让任何不可预计的 null 值有可乘之机隐身于 Optional 中.
现在才开始怎么去使用一个已有的 Optional 实例, 假定我们有一个实例 Optional<User> user, 下面是几个普遍的, 应避免 if(user.isPresent()) { &hellip; } else { &hellip; } 几中应用方式.
存在即返回, 无则提供默认值</p>

<p>1
2
return user.orElse(null);  //而不是 return user.isPresent() ? user.get() : null;
return user.orElse(UNKNOWN_USER);</p>

<p>存在即返回, 无则由函数来产生</p>

<p>1
return user.orElseGet(() -> fetchAUserFromDatabase()); //而不要 return user.isPresent() ? user: fetchAUserFromDatabase();</p>

<p>存在才对它做点什么</p>

<p>1
2
3
4
5
6
user.ifPresent(System.out::println);</p>

<p>//而不要下边那样
if (user.isPresent()) {
  System.out.println(user.get());
}</p>

<p>map 函数隆重登场</p>

<p>当 user.isPresent() 为真, 获得它关联的 orders, 为假则返回一个空集合时, 我们用上面的 orElse, orElseGet 方法都乏力时, 那原本就是 map 函数的责任, 我们可以这样一行</p>

<p>1
2
3
4
5
6
7
8
return user.map(u -> u.getOrders()).orElse(Collections.emptyList())</p>

<p>//上面避免了我们类似 Java 8 之前的做法
if(user.isPresent()) {
  return user.get().getOrders();
} else {
  return Collections.emptyList();
}</p>

<p>map  是可能无限级联的, 比如再深一层, 获得用户名的大写形式</p>

<p>1
2
3
return user.map(u -> u.getUsername())
           .map(name -> name.toUpperCase())
           .orElse(null);</p>

<p>这要搁在以前, 每一级调用的展开都需要放一个 null 值的判断</p>

<p>1
2
3
4
5
6
7
8
9
10
11
User user = &hellip;..
if(user != null) {
  String name = user.getUsername();
  if(name != null) {
    return name.toUpperCase();
  } else {
    return null;
  }
} else {
  return null;
}</p>

<p>针对这方面 Groovy 提供了一种安全的属性/方法访问操作符 ?.</p>

<p>1
user?.getUsername()?.toUpperCase();</p>

<p>Swift 也有类似的语法, 只作用在  Optional 的类型上.
用了 isPresent() 处理 NullPointerException 不叫优雅, 有了  orElse, orElseGet 等, 特别是 map 方法才叫优雅.
其他几个, filter() 把不符合条件的值变为 empty(),  flatMap() 总是与 map() 方法成对的,  orElseThrow() 在有值时直接返回, 无值时抛出想要的异常.
一句话小结: 使用 Optional 时尽量不直接调用 Optional.get() 方法, Optional.isPresent() 更应该被视为一个私有方法, 应依赖于其他像 Optional.orElse(), Optional.orElseGet(), Optional.map() 等这样的方法.
最后, 最好的理解 Java 8 Optional 的方法莫过于看它的源代码 java.util.Optional, 阅读了源代码才能真真正正的让你解释起来最有底气, Optional 的方法中基本都是内部调用  isPresent() 判断, 真时处理值, 假时什么也不做.
参考链接:
1. Java 8 Optional: How to Use it
2. Tired of Null Pointer Exceptions? Consider Using Java SE 8′s Optional!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring JPA的@GeneratedValue注解]]></title>
    <link href="https://mrfant.github.io/blog/2018/09/03/spring-jpade-at-generatedvaluezhu-jie/"/>
    <updated>2018-09-03T21:45:15+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/09/03/spring-jpade-at-generatedvaluezhu-jie</id>
    <content type="html"><![CDATA[<p>JPA的@GeneratedValue注解,在JPA中,@GeneratedValue注解存在的意义主要就是为一个实体生成一个唯一标识的主键(JPA要求每一个实体Entity,必须有且只有一个主键)。</p>

<p>@GeneratedValue提供了主键的生成策略。@GeneratedValue注解有两个属性,分别是strategy和generator,其中generator属性的值是一个字符串,默认为"&ldquo;,其声明了主键生成器的名称(对应于同名的主键生成器@SequenceGenerator和@TableGenerator)。</p>

<p>JPA为开发人员提供了四种主键生成策略,其被定义在枚举类GenerationType中,包括GenerationType.TABLE,GenerationType.SEQUENCE,GenerationType.IDENTITY和GenerationType.AUTO。</p>

<p>四种生成策略详解：<a href="https://blog.csdn.net/u012493207/article/details/50846616">https://blog.csdn.net/u012493207/article/details/50846616</a></p>

<p>如果使用mysql数据库，如果没有设置生成策略为identity，会默认使用auto会设置为sequence,即，jpa会自动生成一个hibernate_sequence表。</p>

<pre><code>note：也可以不用@GeneratedValue注解，在这种情况下，id需要自己手动设置，这种情况下可以在jpa中来用save方法更新表。
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于jpa实体关系映射Cascade权限的相关笔记]]></title>
    <link href="https://mrfant.github.io/blog/2018/09/03/guan-yu-jpashi-ti-guan-xi-ying-she-cascadequan-xian-de-xiang-guan-bi-ji/"/>
    <updated>2018-09-03T21:35:01+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/09/03/guan-yu-jpashi-ti-guan-xi-ying-she-cascadequan-xian-de-xiang-guan-bi-ji</id>
    <content type="html"><![CDATA[<p>本篇博文是博主在项目中总结的结论经验，若要加深理解，还需到具体实例中参照实例来解读。</p>

<p>1、在@ManyToMany，@OneToMany,@ManyToOne三个注解中，会在其中的MTM和MTO两个之间注解关系维护方，MTO不能注解为关系被维护方，</p>

<pre><code>也就是说MTO注解没有mappedBy属性。
</code></pre>

<p>目前来看，多对一和一对多的关系中，只能把“多”的那一方指定为关系维护方。</p>

<p>换句话说也就是MTO注解的就是关系维护方，OTM注解的就是被维护方，需要加上mappedBy注解。</p>

<p>2、在关系维护方中，一般情况下要把Cascade类型设置为All，这样才能拥有对被维护方的创建（persistent）、脱离（detach）和删除（remove）的权限。</p>

<p>而在对被维护方操作的过程中发现，如果没有给被维护方创建（persistent）的Cascade，被维护方几乎毫无作为。</p>

<p>在给了创建权限之后，创建被维护方表的同时也会创建维护方表，但是，这并没有创建关系约束（在MTM中表现为中间表没有创建双方的约束，在MTO（OTM）中表现为维护方表的外键值为null）。</p>

<p>其实，关系被维护方也可以对关联关系进行维护，在有权限的情况下也可以对维护方表进行创建，更新，删除等操作。</p>

<p>有博主的文章说到：</p>

<blockquote><p>被维护方不会主动去维护关联关系。
真正的关系维护，掌握在维护方的手中。
维护方对象不能为空，被维护方对象可以为空。</p></blockquote>

<p>待理解。。。。。。。先挖个坑</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Jpa执行时的一点小问题]]></title>
    <link href="https://mrfant.github.io/blog/2018/09/03/spring-jpazhi-xing-shi-de-yi-dian-xiao-wen-ti/"/>
    <updated>2018-09-03T21:12:45+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/09/03/spring-jpazhi-xing-shi-de-yi-dian-xiao-wen-ti</id>
    <content type="html"><![CDATA[<p>在使用Spring jpa的时候
当配置文件项</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">spring</span><span class="o">.</span><span class="na">jpa</span><span class="o">.</span><span class="na">hibernate</span><span class="o">.</span><span class="na">ddl</span><span class="o">-</span><span class="n">auto</span><span class="o">=</span><span class="n">create</span>
</span><span class='line'><span class="c1">//或 create-drop</span>
</span></code></pre></td></tr></table></div></figure>


<p>每次执行项目的时候会出现一个异常：</p>

<pre><code>Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table 'xgwebdb.xiazai' doesn't exist
</code></pre>

<p>这是因为每次hibernate建表前要把原先的表删除，即执行类似以下语句：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">Hibernate</span><span class="p">:</span> <span class="k">drop</span> <span class="k">table</span> <span class="n">if</span> <span class="k">exists</span> <span class="n">authority</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果这个表有外建，就要先把外建约束删除，即先执行以下语句：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">Hibernate</span><span class="p">:</span> <span class="k">alter</span> <span class="k">table</span> <span class="n">xiazai</span> <span class="k">drop</span> <span class="k">foreign</span> <span class="k">key</span> <span class="n">FKtovauwsdqbp01h60ufbs1076f</span>
</span></code></pre></td></tr></table></div></figure>


<p>也就是说，Spring jpa在配置项为如上设置时，会执行以下流程：</p>

<pre><code>先把表的外建约束删除，然后删除表，然后再建表，最后建立表的外建约束。
</code></pre>

<p>这样一来，配置项为create并且是<strong>第一次执行</strong>的时候，数据库里还没有表，就会出现一次这个异常提示。</p>

<p>而配置项为create-drop时，<strong>每次执行</strong>都会报这个异常</p>

<p>这个错误可不去理会，但需要知晓出现的原因</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RequestDispatcher请求调度接口详解]]></title>
    <link href="https://mrfant.github.io/blog/2018/09/03/requestdispatcherqing-qiu-diao-du-jie-kou-xiang-jie/"/>
    <updated>2018-09-03T20:17:44+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/09/03/requestdispatcherqing-qiu-diao-du-jie-kou-xiang-jie</id>
    <content type="html"><![CDATA[<p>RequestDispatcher 接口,通常这个接口的译名是“请求转发接口”，但是这个译名不准确，也容易让人以为这个接口只能“转发”。</p>

<blockquote><p>其实RequestDispatcher接口具有<strong>请求转发</strong>（forward）和<strong>请求包含</strong>（include）两种方法，两种方法略有差异，所以我喜欢把这个接口称为请求调度，以区别它的接口方法。</p></blockquote>

<h3>请求转发（forward）</h3>

<p>先看实例：</p>

<figure class='code'><figcaption><span>RequestForwardServlet.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * RequestDispatcher 接口具有请求转发（forward）和请求包含（include）两种方法</span>
</span><span class='line'><span class="cm"> * 由于转发的是同一个request请求，所以可以在该请求中设置参数来传递数据</span>
</span><span class='line'><span class="cm"> * 当前代码使用forward转发请求，由转发后的ResultServlet显示结果可知，</span>
</span><span class='line'><span class="cm"> * 请求转发forward会改变uri，queryString根据getRequestDispatcher()函数的方法而变。</span>
</span><span class='line'><span class="cm"> * note：但是请求转发不会改变浏览器URL地址栏。</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kn">package</span> <span class="n">cn</span><span class="o">.</span><span class="na">itcast</span><span class="o">.</span><span class="na">chapter04</span><span class="o">.</span><span class="na">request</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.http.*</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestForwardServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span><span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span>  <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">response</span><span class="o">.</span><span class="na">setContentType</span><span class="o">(</span><span class="s">&quot;text/html;charset=utf-8&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">// 将数据存储到request对象中</span>
</span><span class='line'>        <span class="n">request</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">&quot;company&quot;</span><span class="o">,</span> <span class="s">&quot;北京传智播客教育有限公司&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">// 从request接口中获取请求调度类实例</span>
</span><span class='line'>        <span class="n">RequestDispatcher</span> <span class="n">dispatcher</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestDispatcher</span><span class="o">(</span><span class="s">&quot;/ResultServlet?p1=123&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">dispatcher</span><span class="o">.</span><span class="na">forward</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span><span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span><span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">doGet</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->




<figure class='code'><figcaption><span>ResultServlet.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * output:</span>
</span><span class='line'><span class="cm"> URI:/ResultServlet</span>
</span><span class='line'><span class="cm"> QueryString:p1=123</span>
</span><span class='line'><span class="cm"> parameter p1:123</span>
</span><span class='line'><span class="cm"> 公司名称：北京传智播客教育有限公司</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kn">package</span> <span class="n">cn</span><span class="o">.</span><span class="na">itcast</span><span class="o">.</span><span class="na">chapter04</span><span class="o">.</span><span class="na">request</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.http.*</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ResultServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span>
</span><span class='line'>        <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span><span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">response</span><span class="o">.</span><span class="na">setContentType</span><span class="o">(</span><span class="s">&quot;text/html;charset=utf-8&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="c1">// 获取PrintWriter对象用于输出信息</span>
</span><span class='line'>        <span class="n">PrintWriter</span> <span class="n">out</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">getWriter</span><span class="o">();</span>
</span><span class='line'>        <span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;URI:&quot;</span> <span class="o">+</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;&lt;br&gt;&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;QueryString:&quot;</span> <span class="o">+</span> <span class="n">request</span><span class="o">.</span><span class="na">getQueryString</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;&lt;br&gt;&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;parameter p1:&quot;</span> <span class="o">+</span>
</span><span class='line'>        <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">&quot;p1&quot;</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;&lt;br&gt;&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">// 获取request请求对象中保存的数据</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">company</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span> <span class="n">request</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">&quot;company&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">company</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;公司名称：&quot;</span> <span class="o">+</span> <span class="n">company</span> <span class="o">+</span> <span class="s">&quot;&lt;br&gt;&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span><span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span><span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">doGet</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>请求包含（include）</h3>

<figure class='code'><figcaption><span>IncludingServlet.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * 当前代码使用include请求包含，由转发后的IncludedServlet显示结果可知，</span>
</span><span class='line'><span class="cm"> * 请求包含不会改变uri，queryString,还是including类的值。</span>
</span><span class='line'><span class="cm"> * 还由于在本代码中注释掉了ContentType的设置，所以最后输出的是纯文本（非html）并且中文显示为乱码，</span>
</span><span class='line'><span class="cm"> * 即使在Included代码中设置了也没用，因为在那之前response对象已经生成。</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kn">package</span> <span class="n">cn</span><span class="o">.</span><span class="na">itcast</span><span class="o">.</span><span class="na">chapter04</span><span class="o">.</span><span class="na">request</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.http.*</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">IncludingServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span>
</span><span class='line'>        <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span><span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'><span class="c1">//       response.setContentType(&quot;text/html;charset=utf-8&quot;);</span>
</span><span class='line'>      <span class="n">PrintWriter</span> <span class="n">out</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">getWriter</span><span class="o">();</span>
</span><span class='line'>      <span class="n">RequestDispatcher</span> <span class="n">rd</span> <span class="o">=</span> <span class="n">request</span>
</span><span class='line'>                  <span class="o">.</span><span class="na">getRequestDispatcher</span><span class="o">(</span><span class="s">&quot;/IncludedServlet?p1=abc&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;before including&quot;</span> <span class="o">+</span> <span class="s">&quot;&lt;br&gt;&quot;</span><span class="o">);</span>
</span><span class='line'>          <span class="n">rd</span><span class="o">.</span><span class="na">include</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span><span class='line'>          <span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;after including&quot;</span> <span class="o">+</span> <span class="s">&quot;&lt;br&gt;&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span>
</span><span class='line'>          <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span><span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">doGet</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>IncludedServlet.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * output:</span>
</span><span class='line'><span class="cm"> * before including&lt;br&gt;</span>
</span><span class='line'><span class="cm"> * ??&lt;br&gt;           &lt;---乱码</span>
</span><span class='line'><span class="cm"> * URI:/IncludingServlet&lt;br&gt;</span>
</span><span class='line'><span class="cm"> * QueryString:null&lt;br&gt;</span>
</span><span class='line'><span class="cm"> * parameter p1:abc&lt;br&gt;</span>
</span><span class='line'><span class="cm"> * after including&lt;br&gt;</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kn">package</span> <span class="n">cn</span><span class="o">.</span><span class="na">itcast</span><span class="o">.</span><span class="na">chapter04</span><span class="o">.</span><span class="na">request</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.http.*</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">IncludedServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span>
</span><span class='line'>        <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span><span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// 设置响应时使用的字符编码</span>
</span><span class='line'>      <span class="n">response</span><span class="o">.</span><span class="na">setContentType</span><span class="o">(</span><span class="s">&quot;text/html;charset=utf-8&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">response</span><span class="o">.</span><span class="na">setCharacterEncoding</span><span class="o">(</span><span class="s">&quot;utf-8&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">PrintWriter</span> <span class="n">out</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">getWriter</span><span class="o">();</span>
</span><span class='line'>        <span class="c1">// 在被包含的类中，request获取的那些参数都是原来主动包含类的值，但是parameter除外</span>
</span><span class='line'>      <span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;中国&quot;</span> <span class="o">+</span> <span class="s">&quot;&lt;br&gt;&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;URI:&quot;</span> <span class="o">+</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestURI</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;&lt;br&gt;&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;QueryString:&quot;</span> <span class="o">+</span> <span class="n">request</span><span class="o">.</span><span class="na">getQueryString</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;&lt;br&gt;&quot;</span><span class="o">);</span>
</span><span class='line'>      <span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;parameter p1:&quot;</span> <span class="o">+</span>
</span><span class='line'>                       <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="s">&quot;p1&quot;</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot;&lt;br&gt;&quot;</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span>
</span><span class='line'>        <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span><span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">doGet</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>请求调度接口的实质是转发同一个请求给别的servlet处理，处理的是同一个请求，所以浏览器地址栏不会改变。</p>

<p>而重定向redirect接口是让浏览器重新发送一个请求，地址栏会发生改变。</p>

<blockquote><p>在Spring MVC里，请求重定向以redirect:开头，请求转发以forward:开头。</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Security注销logout操作解析]]></title>
    <link href="https://mrfant.github.io/blog/2018/09/03/spring-securityzhu-xiao-logoutcao-zuo-jie-xi/"/>
    <updated>2018-09-03T17:16:02+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/09/03/spring-securityzhu-xiao-logoutcao-zuo-jie-xi</id>
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/09/03/5b8cfc630f43a.png" alt="spring security" />
<strong>csrf protection is enable default</strong></p>

<pre><code>所以想用get请求来实现注销操作首先要把csrf关掉。
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">http</span><span class="o">.</span><span class="na">csrf</span><span class="o">().</span><span class="na">disable</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<h2>第二种方法：</h2>

<p>不需要关闭csrf，直接调用相关方法：
就可以用get请求来logout</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span><span class="o">=</span><span class="s">&quot;/logout&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">logoutPage</span> <span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">Authentication</span> <span class="n">auth</span> <span class="o">=</span> <span class="n">SecurityContextHolder</span><span class="o">.</span><span class="na">getContext</span><span class="o">().</span><span class="na">getAuthentication</span><span class="o">();</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">auth</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>      <span class="k">new</span> <span class="nf">SecurityContextLogoutHandler</span><span class="o">().</span><span class="na">logout</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">auth</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="k">return</span> <span class="s">&quot;redirect:/login?logout&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Security4实现方法级别安全控制[转载]]]></title>
    <link href="https://mrfant.github.io/blog/2018/09/03/spring-security4shi-xian-fang-fa-ji-bie-an-quan-kong-zhi/"/>
    <updated>2018-09-03T16:54:42+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/09/03/spring-security4shi-xian-fang-fa-ji-bie-an-quan-kong-zhi</id>
    <content type="html"><![CDATA[<p>原文地址： <a href="http://websystique.com/spring-security/spring-security-4-method-security-using-preauthorize-postauthorize-secured-el/">http://websystique.com/spring-security/spring-security-4-method-security-using-preauthorize-postauthorize-secured-el/</a></p>

<p>译文地址： <a href="https://blog.csdn.net/w605283073/article/details/51327182">https://blog.csdn.net/w605283073/article/details/51327182</a></p>

<p><code>@Secured</code> 注解不能指定AND这个条件，比如指定某个方法只能被拥有ADMIN和DBA身份的用户调用。
但是用<code>@PreAuthorize/@PostAuthorize</code>注解可以实现，这两个注解支持<strong>Spring EL</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring MVC /error映射和自定义方法]]></title>
    <link href="https://mrfant.github.io/blog/2018/09/03/spring-mvc-slash-errorying-she-he-zi-ding-yi-fang-fa/"/>
    <updated>2018-09-03T16:48:36+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/09/03/spring-mvc-slash-errorying-she-he-zi-ding-yi-fang-fa</id>
    <content type="html"><![CDATA[<p>/error映射是一个特殊映射，当在template中创建了error.html页面后，发生错误后会自动映射到/error上.</p>

<pre><code>所以创建controller时，不要创建“/error”映射，会无法map到。
</code></pre>

<blockquote><p>错误页面和Spring Security 的Access_Denied页面是不同的！</p></blockquote>

<p>自定义的异常处理参考这篇博客：
<a href="http://blog.didispace.com/springbootexception/">http://blog.didispace.com/springbootexception/</a></p>

<!-- more -->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@ControllerAdvice</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">GlobalExceptionHandler</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">DEFAULT_ERROR_VIEW</span> <span class="o">=</span> <span class="s">&quot;error&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@ExceptionHandler</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="n">Exception</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">ModelAndView</span> <span class="nf">defaultErrorHandler</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ModelAndView</span> <span class="n">mav</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ModelAndView</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">mav</span><span class="o">.</span><span class="na">addObject</span><span class="o">(</span><span class="s">&quot;exception&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">mav</span><span class="o">.</span><span class="na">addObject</span><span class="o">(</span><span class="s">&quot;url&quot;</span><span class="o">,</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestURL</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">mav</span><span class="o">.</span><span class="na">setViewName</span><span class="o">(</span><span class="n">DEFAULT_ERROR_VIEW</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">mav</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Php连接数据库时的一个不起眼bug]]></title>
    <link href="https://mrfant.github.io/blog/2018/09/03/phplian-jie-shu-ju-ku-shi-de-yi-ge-bu-qi-yan-bug/"/>
    <updated>2018-09-03T16:44:23+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/09/03/phplian-jie-shu-ju-ku-shi-de-yi-ge-bu-qi-yan-bug</id>
    <content type="html"><![CDATA[<p>在安装<strong>wordpress连接数据库</strong>的时候也出现了这个bug，太难以发觉了</p>

<p>使用mysqli：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nv">$servername</span> <span class="o">=</span> <span class="nx">“127</span><span class="o">.</span><span class="mf">0.0</span><span class="o">.</span><span class="mi">1</span><span class="nx">”</span><span class="p">;</span>  <span class="c1">//这里不能用localhost，必须为数字</span>
</span><span class='line'><span class="nv">$username</span> <span class="o">=</span> <span class="s2">&quot;username”; </span>
</span><span class='line'><span class="si">$password</span><span class="s2"> = &quot;</span><span class="nx">password”</span><span class="p">;</span>
</span><span class='line'><span class="c1">// 创建连接</span>
</span><span class='line'><span class="nv">$conn</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">mysqli</span><span class="p">(</span><span class="nv">$servername</span><span class="p">,</span> <span class="nv">$username</span><span class="p">,</span> <span class="nv">$password</span><span class="p">);</span>
</span><span class='line'><span class="c1">// 检测连接</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nv">$conn</span><span class="o">-&gt;</span><span class="na">connect_error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">die</span><span class="p">(</span><span class="s2">&quot;连接失败: &quot;</span> <span class="o">.</span> <span class="nv">$conn</span><span class="o">-&gt;</span><span class="na">connect_error</span><span class="p">);</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'> <span class="k">echo</span> <span class="s2">&quot;连接成功”;</span>
</span><span class='line'><span class="s2"> ?&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>同样，使用PDO时：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nv">$servername</span> <span class="o">=</span> <span class="s2">&quot;127.0.0.1&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$username</span> <span class="o">=</span> <span class="s2">&quot;root&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$password</span> <span class="o">=</span> <span class="s2">&quot;password&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$conn</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PDO</span><span class="p">(</span><span class="s2">&quot;mysql:host=</span><span class="si">$servername</span><span class="s2">;&quot;</span><span class="p">,</span> <span class="nv">$username</span><span class="p">,</span> <span class="nv">$password</span><span class="p">);</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;连接成功&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">catch</span><span class="p">(</span><span class="nx">PDOException</span> <span class="nv">$e</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span> <span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 全局变量与global关键字]]></title>
    <link href="https://mrfant.github.io/blog/2018/09/03/python-quan-ju-bian-liang-yu-globalguan-jian-zi/"/>
    <updated>2018-09-03T09:51:37+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/09/03/python-quan-ju-bian-liang-yu-globalguan-jian-zi</id>
    <content type="html"><![CDATA[<p>在python开发使用<strong>全局变量</strong>的时候，会经常遇到一个奇怪的问题：
如下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">num</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">def</span> <span class="nf">Func</span><span class="p">():</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">num</span>
</span><span class='line'>    <span class="n">num</span><span class="o">=</span><span class="n">num</span><span class="o">+</span><span class="mi">1</span>
</span><span class='line'><span class="n">Func</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行后出现这样的错误：</p>

<pre><code>Traceback (most recent call last):
File "test.py", line 5, in &lt;module&gt;
    Func()
File "test.py", line 3, in Func
    print num
UnboundLocalError: local variable 'num' referenced before assignment
</code></pre>

<!-- more -->


<p>意思是 num是一个局部变量，并且在赋值前就引用的错误。
分析可知，python解释器并没有将num变量当作一个全局变量，而是函数内部的局部变量。</p>

<p>查阅文档之后可知，python的全局变量的作用域是整篇代码，在函数之中可以<strong>引用</strong>全局变量的值，但是如果要<strong>修改</strong>它，就会把它当作函数内部的局部变量。
要想引用并修改全局变量必须在变量前面加上<code>global关键字</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">num</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">def</span> <span class="nf">Func</span><span class="p">():</span>
</span><span class='line'>    <span class="o">//</span> <span class="err">哪个函数要修改全局变量，都要在函数前声明一下</span>
</span><span class='line'>    <span class="k">global</span> <span class="n">num</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">num</span>
</span><span class='line'>    <span class="n">num</span><span class="o">=</span><span class="n">num</span><span class="o">+</span><span class="mi">1</span>
</span><span class='line'><span class="n">Func</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是有一个函数例外，那就是<strong>主函数</strong>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">num</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span><span class="o">==</span><span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="o">//</span><span class="err">在主函数里可以正常运行，不需</span><span class="k">global</span><span class="err">声明</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">num</span>
</span><span class='line'>    <span class="n">num</span><span class="o">=</span><span class="n">num</span><span class="o">+</span><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown中插入html代码的坑]]></title>
    <link href="https://mrfant.github.io/blog/2018/09/02/markdownzhong-cha-ru-htmldai-ma-de-keng/"/>
    <updated>2018-09-02T10:38:20+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/09/02/markdownzhong-cha-ru-htmldai-ma-de-keng</id>
    <content type="html"><![CDATA[<p>Pygments 是个好工具，能够让markdown里的代码片段高亮显示，没有这货的存在，整个博文加上代码难免显得枯燥乏味。
但是在使用pygemnts，也就是在markdown写作的过程中插入代码时也有许多的坑，特别是插入html代码时。
由于markdown是一种标记语言，它会由解析器解析为html文本，所以为了<strong>安全考虑</strong>，
在mardown中插入html代码时就有许多禁忌。</p>

<pre><code>插入html代码时，必须让html代码用tab内嵌，当然最好用html代码块包裹
</code></pre>

<!-- more -->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Js-jquery-get-htm5-dataattr[转载]]]></title>
    <link href="https://mrfant.github.io/blog/2018/09/02/js-jquery-get-htm5-dataattr/"/>
    <updated>2018-09-02T00:16:47+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/09/02/js-jquery-get-htm5-dataattr</id>
    <content type="html"><![CDATA[<p><a href="https://segmentfault.com/a/1190000005770912">原文链接</a></p>

<p>今天做项目的时候发现一个坑，关于jQuery获取data-*属性的方法data()，特写此篇来记录。</p>

<blockquote><p>HTML5规定可以为元素添加非标准型的属性，只需添加前缀data-，这些属性可以随意添加，随意命名，目的是为元素提供与渲染无关的信息，或提供语义信息。</p></blockquote>

<h2>js获取data-*的方式</h2>

<h3>通过dataset属性访问</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;myDiv&quot;</span><span class="na">data-appid=</span><span class="s">&quot;123&quot;</span> <span class="na">data-myname=</span><span class="s">&quot;lsxj&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;myDiv&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">appId</span> <span class="o">=</span> <span class="nx">div</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">appid</span><span class="p">;</span><span class="c1">//获取data-appid的值</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">myName</span> <span class="o">=</span> <span class="nx">div</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">myname</span><span class="p">;</span><span class="c1">//获取data-myname的值</span>
</span><span class='line'><span class="c1">//设置值</span>
</span><span class='line'><span class="nx">div</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">appid</span> <span class="o">=</span> <span class="mi">456</span><span class="p">;</span>
</span><span class='line'><span class="nx">div</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">myname</span> <span class="o">=</span> <span class="s2">&quot;newname&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>最终HTML结果</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;myDiv&quot;</span> <span class="na">data-appid=</span><span class="s">&quot;456&quot;</span> <span class="na">data-myname=</span><span class="s">&quot;newname&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>dataset属性的值是DOMStringMap的一个实例，名值对的映射。每个data-name形式的属性都有一个对应的属性，只不过该属性名没有data-前缀。</p>

<p>需要注意的是，dataset中大小写的问题。带连字符连接的名称在使用的时候需要命名驼峰化。例如data-my-name对应的是dataset.myName的值。可看以下代码</p>

<p>//将上面代码的设置值部分进行修改</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">div</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">appId</span> <span class="o">=</span> <span class="mi">789</span><span class="p">;</span>
</span><span class='line'><span class="nx">div</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">myName</span> <span class="o">=</span> <span class="s2">&quot;secondname&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>最终结果:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;myDiv&quot;</span> <span class="na">data-appid=</span><span class="s">&quot;123&quot;</span> <span class="na">data-myname=</span><span class="s">&quot;lsxj&quot;</span> <span class="na">data-app-id=</span><span class="s">&quot;456&quot;</span> <span class="na">data-my-name=</span><span class="s">&quot;secondname&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>传统获取方式 getAttribute</h3>

<p>还是上述的例子。获取data-*的方法可使用如下方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">appId</span> <span class="o">=</span> <span class="nx">div</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s2">&quot;data-appid&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// jQuery获取方法</span>
</span><span class='line'><span class="c1">// data()方法</span>
</span><span class='line'><span class="c1">//获取属性</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">appid</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#myDiv&quot;</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;appid&quot;</span><span class="p">);</span> <span class="c1">//123</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">app_id</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#myDiv&quot;</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;app-id&quot;</span><span class="p">);</span> <span class="c1">//456</span>
</span><span class='line'><span class="c1">//属性赋值</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#myDiv&quot;</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;appid&quot;</span><span class="p">,</span><span class="s2">&quot;666&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//最终HTML代码</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;myDiv&quot;</span> <span class="na">data-appid=</span><span class="s">&quot;456&quot;</span> <span class="na">data-myname=</span><span class="s">&quot;newname&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>需要注意的是，data()的值进行修改并不会影响到DOM元素上的data-*属性的改变。data()的本质其实是将一个 “cache” 附加到了对象上，并使用了一个特殊的属性名称。
所以上述代码中，虽然对div进行了data()赋值操作，但HTML代码中div的data-appid的值仍然为123，因为data()只是修改了缓存的那个值，此时进行$(&lsquo;#myDiv&rsquo;).data(&ldquo;appid&rdquo;)的操作，输出的结果为666.</p></blockquote>

<h3>attr()方法</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">appid</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#myDiv&quot;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;data-appid&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>参考资料：</p>

<ul>
<li>jQuery官方文档</li>
<li>jQuery.data()和HTML5之data-属性</li>
<li>jQuery.data() 的实现方式</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Function-and-exclamation-mark[转载]]]></title>
    <link href="https://mrfant.github.io/blog/2018/09/01/function-and-exclamation-mark/"/>
    <updated>2018-09-01T23:52:32+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/09/01/function-and-exclamation-mark</id>
    <content type="html"><![CDATA[<p>博客转载至：</p>

<p><a href="https://swordair.com/function-and-exclamation-mark/">原文链接</a></p>

<blockquote><p>匿名函数的声明和执行要区分开</p></blockquote>

<p>问题：如果在function之前加上感叹号 (!) 会怎么样？比如下面的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">!</span><span class="kd">function</span><span class="p">(){</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;iifksp&#39;</span><span class="p">)}()</span>        <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure>


<p>在控制台运行后得到的值时true，为什么是true这很容易理解，因为这个匿名函数没有返回值，默认返回的就是undefined，求反的结果很自然的就是true。所以问题并不在于结果值，而是在于，</p>

<blockquote><p><strong>为什么求反操作能够让一个匿名函数的自调变的合法？</strong></p></blockquote>

<!-- more -->


<p>平时我们可能对添加括号来调用匿名函数的方式更为习惯：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;iifksp&#39;</span><span class="p">)})()</span>        <span class="c1">// undefined</span>
</span><span class='line'><span class="c1">//或者：</span>
</span><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;iifksp&#39;</span><span class="p">)}())</span>        <span class="c1">// undefined</span>
</span></code></pre></td></tr></table></div></figure>


<p>虽然上述两者括号的位置不同，不过效果完全一样。
那么，
<strong>是什么好处使得为数不少的人对这种叹号的方式情有独钟？</strong>
如果只是为了节约一个字符未免太没有必要了，这样算来即使一个100K的库恐怕也节省不了多少空间。既然不是空间，那么就是说也许还有时间上的考量，事实很难说清，文章的最后有提到<strong>性能</strong>。
回到核心问题，为什么能这么做？甚至更为核心的问题是，为什么必须这么做？</p>

<blockquote><p>其实无论是括号，还是感叹号，让整个语句合法做的事情只有一件，就是让一个函数声明语句变成了一个表达式。</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">a</span><span class="p">(){</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;iifksp&#39;</span><span class="p">)}</span>        <span class="c1">// undefined</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//这是一个函数声明，如果在这么一个声明后直接加上括号调用，解析器自然不会理解而报错：</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">a</span><span class="p">(){</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;iifksp&#39;</span><span class="p">)}()</span>        <span class="c1">// SyntaxError: unexpected_token</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为这样的代码<strong>混淆了函数声明和函数调用</strong>，以这种方式声明的函数 a，就应该以 a(); 的方式调用。</p>

<p>但是括号则不同，<strong>它将一个函数声明转化成了一个表达式</strong>，解析器不再以函数声明的方式处理函数a，而是作为一个函数表达式处理，也因此只有在程序执行到函数a时它才能被访问。</p>

<blockquote><p>所以，任何消除函数声明和函数表达式间歧义的方法，都可以被解析器正确识别。</p></blockquote>

<p>比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="mi">10</span><span class="p">}();</span> <span class="c1">//赋值        // undefined</span>
</span><span class='line'><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="kc">true</span><span class="p">}();</span>        <span class="c1">// true</span>
</span><span class='line'><span class="mi">1</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;iifksp&#39;</span><span class="p">)}();</span>        <span class="c1">// undefined</span>
</span><span class='line'><span class="c1">// 赋值，逻辑，甚至是逗号，各种操作符都可以告诉解析器，</span>
</span><span class='line'><span class="c1">// 这个不是函数声明，它是个函数表达式。</span>
</span><span class='line'><span class="c1">// 并且，对函数一元运算可以算的上是消除歧义最快的方式，</span>
</span><span class='line'><span class="c1">// 感叹号只是其中之一，如果不在乎返回值，这些一元运算都是有效的：</span>
</span><span class='line'><span class="o">!</span><span class="kd">function</span><span class="p">(){</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;iifksp&#39;</span><span class="p">)}()</span>        <span class="c1">// true</span>
</span><span class='line'><span class="o">+</span><span class="kd">function</span><span class="p">(){</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;iifksp&#39;</span><span class="p">)}()</span>        <span class="c1">// NaN</span>
</span><span class='line'><span class="o">-</span><span class="kd">function</span><span class="p">(){</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;iifksp&#39;</span><span class="p">)}()</span>        <span class="c1">// NaN</span>
</span><span class='line'><span class="o">~</span><span class="kd">function</span><span class="p">(){</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;iifksp&#39;</span><span class="p">)}()</span>        <span class="c1">// -1</span>
</span><span class='line'><span class="c1">// 甚至下面这些关键字，都能很好的工作：</span>
</span><span class='line'><span class="k">void</span> <span class="kd">function</span><span class="p">(){</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;iifksp&#39;</span><span class="p">)}()</span>        <span class="c1">// undefined</span>
</span><span class='line'><span class="k">new</span> <span class="kd">function</span><span class="p">(){</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;iifksp&#39;</span><span class="p">)}()</span>        <span class="c1">// Object</span>
</span><span class='line'><span class="k">delete</span> <span class="kd">function</span><span class="p">(){</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;iifksp&#39;</span><span class="p">)}()</span>        <span class="c1">// true</span>
</span><span class='line'><span class="c1">// 最后，括号做的事情也是一样的，消除歧义才是它真正的工作，</span>
</span><span class='line'><span class="c1">// 而不是把函数作为一个整体，所以无论括号括在声明上还是把整个函数都括在里面，都是合法的：</span>
</span><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;iifksp&#39;</span><span class="p">)})()</span>        <span class="c1">// undefined</span>
</span><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;iifksp&#39;</span><span class="p">)}())</span>        <span class="c1">// undefined</span>
</span></code></pre></td></tr></table></div></figure>


<p>说了这么多，实则在说的一些都是最为基础的概念——语句，表达式，表达式语句，这些概念如同指针与指针变量一样容易产生混淆。虽然这种混淆对编程无表征影响，但却是一块绊脚石随时可能因为它而头破血流。</p>

<hr />

<p>最后讨论下性能。我在jsperf上简单建立了一个测试：<a href="http://jsperf.com/js-funcion-expression-speed">http://jsperf.com/js-funcion-expression-speed</a> ，可以用不同浏览器访问，运行测试查看结果。我也同时将结果罗列如下表所示（由于我比较穷，测试配置有点丢人不过那也没办法：奔腾双核1.4G，2G内存，win7企业版）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Option</span> <span class="nx">Code</span>    <span class="nx">Ops</span><span class="o">/</span><span class="nx">sec</span>
</span><span class='line'><span class="nx">Chrome</span> <span class="mi">13</span> <span class="nx">Firefox</span> <span class="mi">6</span>   <span class="nx">IE9</span> <span class="nx">Safari</span> <span class="mi">5</span>
</span><span class='line'><span class="o">!</span>  <span class="o">!</span><span class="kd">function</span><span class="p">(){;}()</span>  <span class="mi">3</span><span class="p">,</span><span class="mi">773</span><span class="p">,</span><span class="mi">196</span> <span class="mi">10</span><span class="p">,</span><span class="mi">975</span><span class="p">,</span><span class="mi">198</span>    <span class="mi">572</span><span class="p">,</span><span class="mi">694</span>  <span class="mi">2</span><span class="p">,</span><span class="mi">810</span><span class="p">,</span><span class="mi">197</span>
</span><span class='line'><span class="o">+</span>  <span class="o">+</span><span class="kd">function</span><span class="p">(){;}()</span>  <span class="mi">21</span><span class="p">,</span><span class="mi">553</span><span class="p">,</span><span class="mi">847</span>    <span class="mi">12</span><span class="p">,</span><span class="mi">135</span><span class="p">,</span><span class="mi">960</span>    <span class="mi">572</span><span class="p">,</span><span class="mi">694</span>  <span class="mi">1</span><span class="p">,</span><span class="mi">812</span><span class="p">,</span><span class="mi">238</span>
</span><span class='line'><span class="o">-</span>  <span class="o">-</span><span class="kd">function</span><span class="p">(){;}()</span>  <span class="mi">21</span><span class="p">,</span><span class="mi">553</span><span class="p">,</span><span class="mi">847</span>    <span class="mi">12</span><span class="p">,</span><span class="mi">135</span><span class="p">,</span><span class="mi">960</span>    <span class="mi">572</span><span class="p">,</span><span class="mi">694</span>  <span class="mi">1</span><span class="p">,</span><span class="mi">864</span><span class="p">,</span><span class="mi">155</span>
</span><span class='line'><span class="o">~</span>  <span class="o">~</span><span class="kd">function</span><span class="p">(){;}()</span>  <span class="mi">3</span><span class="p">,</span><span class="mi">551</span><span class="p">,</span><span class="mi">136</span> <span class="mi">3</span><span class="p">,</span><span class="mi">651</span><span class="p">,</span><span class="mi">652</span> <span class="mi">572</span><span class="p">,</span><span class="mi">694</span>  <span class="mi">1</span><span class="p">,</span><span class="mi">876</span><span class="p">,</span><span class="mi">002</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="kd">function</span><span class="p">(){;})()</span> <span class="mi">3</span><span class="p">,</span><span class="mi">914</span><span class="p">,</span><span class="mi">953</span> <span class="mi">12</span><span class="p">,</span><span class="mi">135</span><span class="p">,</span><span class="mi">960</span>    <span class="mi">572</span><span class="p">,</span><span class="mi">694</span>  <span class="mi">3</span><span class="p">,</span><span class="mi">025</span><span class="p">,</span><span class="mi">608</span>
</span><span class='line'><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="kd">function</span><span class="p">(){;}())</span> <span class="mi">4</span><span class="p">,</span><span class="mi">075</span><span class="p">,</span><span class="mi">201</span> <span class="mi">12</span><span class="p">,</span><span class="mi">135</span><span class="p">,</span><span class="mi">960</span>    <span class="mi">572</span><span class="p">,</span><span class="mi">694</span>  <span class="mi">3</span><span class="p">,</span><span class="mi">025</span><span class="p">,</span><span class="mi">608</span>
</span><span class='line'><span class="k">void</span>   <span class="k">void</span> <span class="kd">function</span><span class="p">(){;}()</span>  <span class="mi">4</span><span class="p">,</span><span class="mi">030</span><span class="p">,</span><span class="mi">756</span> <span class="mi">12</span><span class="p">,</span><span class="mi">135</span><span class="p">,</span><span class="mi">960</span>    <span class="mi">572</span><span class="p">,</span><span class="mi">694</span>  <span class="mi">3</span><span class="p">,</span><span class="mi">025</span><span class="p">,</span><span class="mi">608</span>
</span><span class='line'><span class="k">new</span>    <span class="k">new</span> <span class="kd">function</span><span class="p">(){;}()</span>   <span class="mi">619</span><span class="p">,</span><span class="mi">606</span>  <span class="mi">299</span><span class="p">,</span><span class="mi">100</span>  <span class="mi">407</span><span class="p">,</span><span class="mi">104</span>  <span class="mi">816</span><span class="p">,</span><span class="mi">903</span>
</span><span class='line'><span class="k">delete</span> <span class="k">delete</span> <span class="kd">function</span><span class="p">(){;}()</span>    <span class="mi">4</span><span class="p">,</span><span class="mi">816</span><span class="p">,</span><span class="mi">225</span> <span class="mi">12</span><span class="p">,</span><span class="mi">135</span><span class="p">,</span><span class="mi">960</span>    <span class="mi">572</span><span class="p">,</span><span class="mi">694</span>  <span class="mi">2</span><span class="p">,</span><span class="mi">693</span><span class="p">,</span><span class="mi">524</span>
</span><span class='line'><span class="o">=</span>  <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){;}()</span>   <span class="mi">4</span><span class="p">,</span><span class="mi">984</span><span class="p">,</span><span class="mi">774</span> <span class="mi">12</span><span class="p">,</span><span class="mi">135</span><span class="p">,</span><span class="mi">960</span>    <span class="mi">565</span><span class="p">,</span><span class="mi">982</span>  <span class="mi">2</span><span class="p">,</span><span class="mi">602</span><span class="p">,</span><span class="mi">630</span>
</span><span class='line'><span class="o">&amp;&amp;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="kd">function</span><span class="p">(){;}()</span>  <span class="mi">5</span><span class="p">,</span><span class="mi">307</span><span class="p">,</span><span class="mi">200</span> <span class="mi">4</span><span class="p">,</span><span class="mi">393</span><span class="p">,</span><span class="mi">486</span> <span class="mi">572</span><span class="p">,</span><span class="mi">694</span>  <span class="mi">2</span><span class="p">,</span><span class="mi">565</span><span class="p">,</span><span class="mi">645</span>
</span><span class='line'><span class="o">||</span> <span class="mi">0</span> <span class="o">||</span> <span class="kd">function</span><span class="p">(){;}()</span>  <span class="mi">5</span><span class="p">,</span><span class="mi">000</span><span class="p">,</span><span class="mi">000</span> <span class="mi">4</span><span class="p">,</span><span class="mi">406</span><span class="p">,</span><span class="mi">035</span> <span class="mi">572</span><span class="p">,</span><span class="mi">694</span>  <span class="mi">2</span><span class="p">,</span><span class="mi">490</span><span class="p">,</span><span class="mi">128</span>
</span><span class='line'><span class="o">&amp;</span>  <span class="mi">1</span> <span class="o">&amp;</span> <span class="kd">function</span><span class="p">(){;}()</span>   <span class="mi">4</span><span class="p">,</span><span class="mi">918</span><span class="p">,</span><span class="mi">209</span> <span class="mi">12</span><span class="p">,</span><span class="mi">135</span><span class="p">,</span><span class="mi">960</span>    <span class="mi">572</span><span class="p">,</span><span class="mi">694</span>  <span class="mi">1</span><span class="p">,</span><span class="mi">705</span><span class="p">,</span><span class="mi">551</span>
</span><span class='line'><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="kd">function</span><span class="p">(){;}()</span>   <span class="mi">4</span><span class="p">,</span><span class="mi">859</span><span class="p">,</span><span class="mi">802</span> <span class="mi">12</span><span class="p">,</span><span class="mi">135</span><span class="p">,</span><span class="mi">960</span>    <span class="mi">572</span><span class="p">,</span><span class="mi">694</span>  <span class="mi">1</span><span class="p">,</span><span class="mi">612</span><span class="p">,</span><span class="mi">372</span>
</span><span class='line'><span class="o">^</span>  <span class="mi">1</span> <span class="o">^</span> <span class="kd">function</span><span class="p">(){;}()</span>   <span class="mi">4</span><span class="p">,</span><span class="mi">654</span><span class="p">,</span><span class="mi">916</span> <span class="mi">12</span><span class="p">,</span><span class="mi">135</span><span class="p">,</span><span class="mi">960</span>    <span class="mi">572</span><span class="p">,</span><span class="mi">694</span>  <span class="mi">1</span><span class="p">,</span><span class="mi">579</span><span class="p">,</span><span class="mi">778</span>
</span><span class='line'><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){;}()</span>    <span class="mi">4</span><span class="p">,</span><span class="mi">878</span><span class="p">,</span><span class="mi">193</span> <span class="mi">12</span><span class="p">,</span><span class="mi">135</span><span class="p">,</span><span class="mi">960</span>    <span class="mi">572</span><span class="p">,</span><span class="mi">694</span>  <span class="mi">2</span><span class="p">,</span><span class="mi">281</span><span class="p">,</span><span class="mi">186</span>
</span></code></pre></td></tr></table></div></figure>


<p>可见不同的方式产生的结果并不相同，而且，差别很大，因浏览器而异。
但我们还是可以从中找出很多共性：</p>

<p>new方法永远最慢——这也是理所当然的。</p>

<p>其它方面很多差距其实不大，但有一点可以肯定的是，感叹号并非最为理想的选择。反观传统的括号，在测试里表现始终很快，在大多数情况下比感叹号更快——所以平时我们常用的方式毫无问题，甚至可以说是最优的。加减号在chrome表现惊人，而且在其他浏览器下也普遍很快，相比感叹号效果更好。</p>

<p>当然这只是个简单测试，不能说明问题。但有些结论是有意义的：</p>

<blockquote><p><strong>括号和加减号最优。</strong></p></blockquote>

<p>但是为什么这么多开发者钟情于感叹号？我觉得这只是一个习惯问题，它们之间的优劣完全可以忽略。一旦习惯了一种代码风格，那么这种约定会使得程序从混乱变得可读。如果习惯了感叹号，我不得不承认，它比括号有更好的可读性。我不用在阅读时留意括号的匹配，也不用在编写时粗心遗忘——</p>

<p>当我也这么干然后嚷嚷着这居然又节省了一个字符而沾沾自喜的时候，却忘了自己仓皇翻出一本卷边的C语言教科书的窘迫和荒唐&hellip;&hellip;任何人都有忘记的时候，当再捡起来的时候，捡起的就已经不单单是忘掉的东西了。
2011-10-31更新：如果你使用aptana，那么在使用（!+-）时要注意一点，它们会让aptana的解析失效，导致Outline窗口没有任何显示。但是就代码本身而言，其运行没有任何问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jquery .ready() 与window.onload的区别]]></title>
    <link href="https://mrfant.github.io/blog/2018/09/01/jquery-ready-yu-window-dot-onloadde-qu-bie/"/>
    <updated>2018-09-01T23:15:26+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/09/01/jquery-ready-yu-window-dot-onloadde-qu-bie</id>
    <content type="html"><![CDATA[<h2>1.执行时间</h2>

<p>window.onload必须等到页面内包括<strong>图片</strong>的<strong>所有</strong>元素加载完毕后才能执行。
$(document).ready()是DOM结构绘制完毕后就执行，不必等到加载完毕。</p>

<h2>2.编写个数不同</h2>

<p>window.onload不能同时编写多个，如果有多个window.onload方法，只会执行一个
$(document).ready()可以同时编写多个，并且都可以得到执行</p>

<!-- more -->


<h2>3.简化写法</h2>

<pre><code>window.onload没有简化写法 

$(document).ready(function(){})
可以简写成:
$(function(){});
$(function(){});        //$()里面一个匿名函数
</code></pre>

<p>另外，需要注意一点，由于在 <code>$(document).ready()</code> 方法内注册的事件，只要 <strong>DOM 就绪</strong>就会被执行，因此可能此时元素的关联文件未下载完。例如与图片有关的 html 下载完毕，并且已经解析为 DOM 树了，但很有可能图片还没有加载完毕,所以例如<em>图片的高度和宽度</em>这样的属性此时不一定有效。
要解决这个问题，可以使用 Jquery 中另一个关于页面加载的方法 &mdash;<code>load()</code> 方法。 <code>load()</code> 方法会在元素的 onload 事件中绑定一个处理函数。如果处理函数绑定给 window 对象，则会在所有内容 ( 包括窗口、框架、对象和图像等 ) 加载完毕后触发，如果处理函数绑定在元素上，则会在元素的内容加载完毕后触发。</p>

<h3>代码如下：</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">load</span><span class="p">(</span><span class="kd">function</span> <span class="p">(){</span>
</span><span class='line'>       <span class="c1">// 编写代码  </span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="c1">//等价于 JavaScript 中的以下代码 </span>
</span><span class='line'><span class="nx">Window</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(){</span>
</span><span class='line'>     <span class="c1">// 编写代码 </span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IntelliJ IDEA的inspections功能]]></title>
    <link href="https://mrfant.github.io/blog/2018/09/01/intellij-ideade-inspectionsgong-neng/"/>
    <updated>2018-09-01T23:13:14+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/09/01/intellij-ideade-inspectionsgong-neng</id>
    <content type="html"><![CDATA[<blockquote><p>Intellij idea的inspections功能非常智能，甚至可以成为菜鸟程序员的学习工具，借助于它可以规范自己的代码，完善风格，甚至大多数bug或error都能在inspections下无所遁形
但是在有些情况下我们也需要自定义inspections的相关功能，
以下记录我自定义的配置：</p></blockquote>

<ol>
<li><p>thymeleaf  的：expression variable validation ，由于tymeleaf的表达式定义在controller里，idea找不到其定义所以会报错，其实不影响运行，所以把这个inspect从error修改为warning。</p></li>
<li><p>xml 的unbound namespace prefixes  ， 这个也与thymeleaf有关，在一个项目中使用tymeleaf代码fragment时，由于th namespace没有bound，所以会不停报错，为了不影响，也把这个关了。</p></li>
</ol>


<!-- more -->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Server 超级全局变量表]]></title>
    <link href="https://mrfant.github.io/blog/2018/08/28/server-superglobal/"/>
    <updated>2018-08-28T00:00:00+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/08/28/server-superglobal</id>
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/09/01/5b8a803319eb0.jpg" alt="" /></p>

<!-- more -->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入理解JQuery中的on方法(事件委派机制)]]></title>
    <link href="https://mrfant.github.io/blog/2018/08/27/jQuery-on-methon/"/>
    <updated>2018-08-27T00:00:00+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/08/27/jQuery-on-methon</id>
    <content type="html"><![CDATA[<p>参考博客：<a href="https://segmentfault.com/a/1190000006652120">https://segmentfault.com/a/1190000006652120</a></p>

<h2>抛出问题：</h2>

<blockquote><p>jquery on()方法和click()等绑定事件监听函数的方法有什么区别?</p></blockquote>

<h2>demo：</h2>

<p>以下实例中原先的 HTML 元素点击其身后的 Delete 按钮就会被删除。而动态添加的 HTML 元素，使用 click() 这种写法，点击 Delete 按钮无法删除；使用 On() 方式可以。</p>

<p><a href="https://c.runoob.com/codedemo/5357">在线演示</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#newclick&quot;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.li&quot;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="s1">&#39;&lt;li&gt;动态添加的HTML元素click&lt;button class=&quot;deleteclick&quot;&gt;Delete&lt;/button&gt;&lt;/li&gt;&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#newon&quot;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.li&quot;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="s1">&#39;&lt;li&gt;动态添加的HTML元素on&lt;button class=&quot;deleteon&quot;&gt;Delete&lt;/button&gt;&lt;/li&gt;&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.delete&quot;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">parent</span><span class="p">().</span><span class="nx">remove</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.li&quot;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="s2">&quot;.deleteon&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">parent</span><span class="p">().</span><span class="nx">remove</span><span class="p">();</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.deleteclick&quot;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">parent</span><span class="p">().</span><span class="nx">remove</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h2>结论：</h2>

<p>二者在绑定<strong>静态控件</strong>时没有区别，<em>但是</em>如果面对动态产生的控件，只有on()能成功的绑定到<strong>动态控件</strong>中。
{:.info}</p>

<h2>拓展</h2>

<p>许多项目在前后端交互时都采用ajax或pjax等技术动态添加新的控件。在这种情况下，就必须使用on（）方法来为新添加的元素绑定事件监听函数。
具体见参考博客</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[大数阶乘问题及内存分配的堆和栈区别]]></title>
    <link href="https://mrfant.github.io/blog/2017/11/24/the-big-num-mul/"/>
    <updated>2017-11-24T17:19:52+08:00</updated>
    <id>https://mrfant.github.io/blog/2017/11/24/the-big-num-mul</id>
    <content type="html"><![CDATA[<h2>问题描述：</h2>

<blockquote><p>问题描述</p>

<p>　　输入一个正整数<em>n</em>，输出<em>n</em>!的值。
　　其中<em>n</em>!=1<em>2</em>3<em>…**n</em>。</p>

<p>算法描述</p>

<p>　　<em>n</em>!可能很大，而计算机能表示的整数范围有限，需要使用高精度计算的方法。使用一个数组<em>A</em>来表示一个大整数<em>a</em>，<em>A</em>[0]表示<em>a</em>的个位，<em>A</em>[1]表示<em>a</em>的十位，依次类推。
　　将<em>a</em>乘以一个整数<em>k</em>变为将数组<em>A</em>的每一个元素都乘以<em>k</em>，请注意处理相应的进位。
　　首先将<em>a</em>设为1，然后乘2，乘3，当乘到<em>n</em>时，即得到了<em>n</em>!的值。</p></blockquote>

<!-- more -->


<blockquote><p>输入格式</p>

<p>　　输入包含一个正整数<em>n</em>，<em>n</em>&lt;=1000。</p>

<p>输出格式</p>

<p>　　输出<em>n</em>!的准确值。</p>

<p>样例输入</p>

<p>10</p>

<p>样例输出</p>

<p>3628800</p></blockquote>

<p>这道题是典型的大数问题，难度不高，这篇的重点也不在于题目本身，只是记录和反思一下在编程中遇到的一个小问题。</p>

<h3>本人源码：</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="n">using</span> <span class="n">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="o">*</span><span class="n">p</span><span class="o">=</span><span class="n">new</span> <span class="kt">int</span> <span class="p">[</span><span class="mi">1000000</span><span class="p">];</span>   <span class="c1">//6</span>
</span><span class='line'>    <span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">q</span><span class="o">=</span><span class="mi">0</span><span class="p">;;</span>        <span class="c1">//q 为最大的那一位</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">add</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;=</span><span class="n">q</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>            <span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">*=</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'>            <span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">+=</span><span class="n">add</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">&gt;=</span><span class="mi">10</span><span class="p">){</span>
</span><span class='line'>                <span class="n">add</span><span class="o">=</span><span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">/</span><span class="mi">10</span><span class="p">;</span>
</span><span class='line'>                <span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">%=</span><span class="mi">10</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="n">add</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">j</span><span class="o">==</span><span class="n">q</span><span class="o">&amp;&amp;</span><span class="n">add</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>                <span class="k">while</span> <span class="p">(</span><span class="n">add</span><span class="p">){</span>
</span><span class='line'>                    <span class="n">p</span><span class="p">[</span><span class="o">++</span><span class="n">q</span><span class="p">]</span><span class="o">=</span><span class="n">add</span><span class="o">%</span><span class="mi">10</span><span class="p">;</span>
</span><span class='line'>                    <span class="n">add</span><span class="o">/=</span><span class="mi">10</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">add</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(;</span><span class="n">q</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="n">q</span><span class="o">--</span><span class="p">)</span>
</span><span class='line'>        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">p</span><span class="p">[</span><span class="n">q</span><span class="p">];</span>
</span><span class='line'>    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>程序流程很清晰，就是按题目的思路对每一位乘以n，然后对进位进行处理，由于我用了一个变量q来标注数的最高位，所以本程序中需要注意的一点就在于对最高位的进位的处理上，需要小小折腾一下。</p>

<p>网上其他博主的源码更为简洁，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;  </span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;  </span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;  </span>
</span><span class='line'><span class="cp">#define MAX 4000  </span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">a</span><span class="p">[</span><span class="n">MAX</span><span class="p">],</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">s</span><span class="p">,</span><span class="n">r</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>    <span class="n">memset</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">a</span><span class="p">));</span>
</span><span class='line'>    <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">MAX</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>            <span class="n">s</span><span class="o">=</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">*</span><span class="n">i</span><span class="o">+</span><span class="n">r</span><span class="p">;</span>
</span><span class='line'>            <span class="n">r</span><span class="o">=</span><span class="n">s</span><span class="o">/</span><span class="mi">10</span><span class="p">;</span><span class="c1">//进位  </span>
</span><span class='line'>            <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">s</span><span class="o">%</span><span class="mi">10</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="n">MAX</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">--</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="p">;</span><span class="n">j</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">--</span><span class="p">)</span><span class="c1">//倒序输出  </span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是c语言版的，思路也非常清晰简洁，甚至简单粗暴而有效，可多加参考。</p>

<p>在本次解题过程中产生了一个小问题：</p>

<p>源码<code>int *p=new int [1000000];</code> 即初始数组的声明的时候，一开始写成了这样<code>int *p=new int (1000000);</code>。犯下了大错，  new int (1000000) 根本不是对数组的声明，而是对int 变量的声明，括号中的内容是int变量的初始值。所以在程序运行过程中产生了运行错误。<strong>以后需要多加注意</strong></p>

<p>在debug的过程中，发现了一个需要关注的地方，即【】静态数组与new 的动态数组的区别，其实之前也有所了解，即静态数组是和普通变量一样存储在栈里的，而动态数组（通过new关键字申请的内存空间）都是在heap堆中。</p>

<p>这是一个比较深入的问题，虽然这题的bug不在此处，但是这也是一个需要关注的地方，待后期深入学习后再撰写一篇博文详细记录。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一道题引出的Unix-Fork函数解析]]></title>
    <link href="https://mrfant.github.io/blog/2017/11/24/Unix-Fork-function/"/>
    <updated>2017-11-24T17:19:52+08:00</updated>
    <id>https://mrfant.github.io/blog/2017/11/24/Unix-Fork-function</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="c1">//可产生20个进程，包括main进程</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">fork</span><span class="p">();</span>
</span><span class='line'>    <span class="n">fork</span><span class="p">()</span><span class="o">&amp;&amp;</span><span class="n">fork</span><span class="p">()</span><span class="o">||</span><span class="n">fork</span><span class="p">();</span>
</span><span class='line'>    <span class="n">fork</span><span class="p">();</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;+  </span><span class="se">\n\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->

]]></content>
  </entry>
  
</feed>
