<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[YII Fant's Blog]]></title>
  <link href="https://mrfant.github.io/atom.xml" rel="self"/>
  <link href="https://mrfant.github.io/"/>
  <updated>2018-09-01T21:20:44+08:00</updated>
  <id>https://mrfant.github.io/</id>
  <author>
    <name><![CDATA[Yii]]></name>
    <email><![CDATA[yii.fant@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Server 超级全局变量表]]></title>
    <link href="https://mrfant.github.io/blog/2018/08/28/server%E8%B6%85%E7%BA%A7%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E8%A1%A8/"/>
    <updated>2018-08-28T00:00:00+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/08/28/server超级全局变量表</id>
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/09/01/5b8a803319eb0.jpg" alt="" /></p>

<!-- more -->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入理解JQuery中的on方法(事件委派机制)]]></title>
    <link href="https://mrfant.github.io/blog/2018/08/27/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3JQuery%E4%B8%AD%E7%9A%84on%E6%96%B9%E6%B3%95(%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6%EF%BC%89/"/>
    <updated>2018-08-27T00:00:00+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/08/27/深入理解JQuery中的on方法(事件委派机制）</id>
    <content type="html"><![CDATA[<p>参考博客：<a href="https://segmentfault.com/a/1190000006652120">https://segmentfault.com/a/1190000006652120</a></p>

<h2>抛出问题：</h2>

<blockquote><p>jquery on()方法和click()等绑定事件监听函数的方法有什么区别?</p></blockquote>

<h2>demo：</h2>

<p>以下实例中原先的 HTML 元素点击其身后的 Delete 按钮就会被删除。而动态添加的 HTML 元素，使用 click() 这种写法，点击 Delete 按钮无法删除；使用 On() 方式可以。</p>

<p><a href="https://c.runoob.com/codedemo/5357">在线演示</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#newclick&quot;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.li&quot;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="s1">&#39;&lt;li&gt;动态添加的HTML元素click&lt;button class=&quot;deleteclick&quot;&gt;Delete&lt;/button&gt;&lt;/li&gt;&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#newon&quot;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.li&quot;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="s1">&#39;&lt;li&gt;动态添加的HTML元素on&lt;button class=&quot;deleteon&quot;&gt;Delete&lt;/button&gt;&lt;/li&gt;&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.delete&quot;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">parent</span><span class="p">().</span><span class="nx">remove</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.li&quot;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="s2">&quot;.deleteon&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">parent</span><span class="p">().</span><span class="nx">remove</span><span class="p">();</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.deleteclick&quot;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">parent</span><span class="p">().</span><span class="nx">remove</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h2>结论：</h2>

<p>二者在绑定<strong>静态控件</strong>时没有区别，<em>但是</em>如果面对动态产生的控件，只有on()能成功的绑定到<strong>动态控件</strong>中。
{:.info}</p>

<h2>拓展</h2>

<p>许多项目在前后端交互时都采用ajax或pjax等技术动态添加新的控件。在这种情况下，就必须使用on（）方法来为新添加的元素绑定事件监听函数。
具体见参考博客</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[大数阶乘问题及内存分配的堆和栈区别]]></title>
    <link href="https://mrfant.github.io/blog/2017/11/24/%E5%A4%A7%E6%95%B0%E9%98%B6%E4%B9%98%E9%97%AE%E9%A2%98%E5%8F%8A%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E4%B8%AD%E5%A0%86%E5%92%8C%E6%A0%88%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <updated>2017-11-24T17:19:52+08:00</updated>
    <id>https://mrfant.github.io/blog/2017/11/24/大数阶乘问题及内存分配中堆和栈的区别</id>
    <content type="html"><![CDATA[<h2>问题描述：</h2>

<blockquote><p>问题描述</p>

<p>　　输入一个正整数<em>n</em>，输出<em>n</em>!的值。
　　其中<em>n</em>!=1<em>2</em>3<em>…**n</em>。</p>

<p>算法描述</p>

<p>　　<em>n</em>!可能很大，而计算机能表示的整数范围有限，需要使用高精度计算的方法。使用一个数组<em>A</em>来表示一个大整数<em>a</em>，<em>A</em>[0]表示<em>a</em>的个位，<em>A</em>[1]表示<em>a</em>的十位，依次类推。
　　将<em>a</em>乘以一个整数<em>k</em>变为将数组<em>A</em>的每一个元素都乘以<em>k</em>，请注意处理相应的进位。
　　首先将<em>a</em>设为1，然后乘2，乘3，当乘到<em>n</em>时，即得到了<em>n</em>!的值。</p></blockquote>

<!-- more -->


<blockquote><p>输入格式</p>

<p>　　输入包含一个正整数<em>n</em>，<em>n</em>&lt;=1000。</p>

<p>输出格式</p>

<p>　　输出<em>n</em>!的准确值。</p>

<p>样例输入</p>

<p>10</p>

<p>样例输出</p>

<p>3628800</p></blockquote>

<p>这道题是典型的大数问题，难度不高，这篇的重点也不在于题目本身，只是记录和反思一下在编程中遇到的一个小问题。</p>

<h3>本人源码：</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="n">using</span> <span class="n">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="o">*</span><span class="n">p</span><span class="o">=</span><span class="n">new</span> <span class="kt">int</span> <span class="p">[</span><span class="mi">1000000</span><span class="p">];</span>   <span class="c1">//6</span>
</span><span class='line'>    <span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">q</span><span class="o">=</span><span class="mi">0</span><span class="p">;;</span>        <span class="c1">//q 为最大的那一位</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">add</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;=</span><span class="n">q</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>            <span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">*=</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'>            <span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">+=</span><span class="n">add</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">&gt;=</span><span class="mi">10</span><span class="p">){</span>
</span><span class='line'>                <span class="n">add</span><span class="o">=</span><span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">/</span><span class="mi">10</span><span class="p">;</span>
</span><span class='line'>                <span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">%=</span><span class="mi">10</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="n">add</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">j</span><span class="o">==</span><span class="n">q</span><span class="o">&amp;&amp;</span><span class="n">add</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>                <span class="k">while</span> <span class="p">(</span><span class="n">add</span><span class="p">){</span>
</span><span class='line'>                    <span class="n">p</span><span class="p">[</span><span class="o">++</span><span class="n">q</span><span class="p">]</span><span class="o">=</span><span class="n">add</span><span class="o">%</span><span class="mi">10</span><span class="p">;</span>
</span><span class='line'>                    <span class="n">add</span><span class="o">/=</span><span class="mi">10</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">add</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(;</span><span class="n">q</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="n">q</span><span class="o">--</span><span class="p">)</span>
</span><span class='line'>        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">p</span><span class="p">[</span><span class="n">q</span><span class="p">];</span>
</span><span class='line'>    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>程序流程很清晰，就是按题目的思路对每一位乘以n，然后对进位进行处理，由于我用了一个变量q来标注数的最高位，所以本程序中需要注意的一点就在于对最高位的进位的处理上，需要小小折腾一下。</p>

<p>网上其他博主的源码更为简洁，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;  </span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;  </span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;  </span>
</span><span class='line'><span class="cp">#define MAX 4000  </span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">a</span><span class="p">[</span><span class="n">MAX</span><span class="p">],</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">s</span><span class="p">,</span><span class="n">r</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>    <span class="n">memset</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">a</span><span class="p">));</span>
</span><span class='line'>    <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">MAX</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>            <span class="n">s</span><span class="o">=</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">*</span><span class="n">i</span><span class="o">+</span><span class="n">r</span><span class="p">;</span>
</span><span class='line'>            <span class="n">r</span><span class="o">=</span><span class="n">s</span><span class="o">/</span><span class="mi">10</span><span class="p">;</span><span class="c1">//进位  </span>
</span><span class='line'>            <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">s</span><span class="o">%</span><span class="mi">10</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="n">MAX</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">--</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="p">;</span><span class="n">j</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">--</span><span class="p">)</span><span class="c1">//倒序输出  </span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是c语言版的，思路也非常清晰简洁，甚至简单粗暴而有效，可多加参考。</p>

<p>在本次解题过程中产生了一个小问题：</p>

<p>源码<code>int *p=new int [1000000];</code> 即初始数组的声明的时候，一开始写成了这样<code>int *p=new int (1000000);</code>。犯下了大错，  new int (1000000) 根本不是对数组的声明，而是对int 变量的声明，括号中的内容是int变量的初始值。所以在程序运行过程中产生了运行错误。<strong>以后需要多加注意</strong></p>

<p>在debug的过程中，发现了一个需要关注的地方，即【】静态数组与new 的动态数组的区别，其实之前也有所了解，即静态数组是和普通变量一样存储在栈里的，而动态数组（通过new关键字申请的内存空间）都是在heap堆中。</p>

<p>这是一个比较深入的问题，虽然这题的bug不在此处，但是这也是一个需要关注的地方，待后期深入学习后再撰写一篇博文详细记录。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[十六进制转十进制]]></title>
    <link href="https://mrfant.github.io/blog/2017/11/24/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%8D%81%E8%BF%9B%E5%88%B6/"/>
    <updated>2017-11-24T17:19:52+08:00</updated>
    <id>https://mrfant.github.io/blog/2017/11/24/十六进制转十进制</id>
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1flt24b3b6vj30zu0d2dhu.jpg" alt="问题描述" /></p>

<blockquote><p>问题描述</p>

<p>从键盘输入一个不超过8位的正的十六进制数字符串，将它转换为正的十进制数后输出。
　　注：十六进制数中的10~15分别用大写的英文字母A、B、C、D、E、F表示。</p></blockquote>

<!-- more -->


<p><strong>code</strong>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="n">using</span> <span class="n">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">hex</span><span class="o">&gt;&gt;</span><span class="n">value</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">dec</span><span class="o">&lt;&lt;</span><span class="n">value</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>题目本身不提，只是发现一个奇怪的情况：</p>

<p>测评程序测试一个四十亿的值时，显示出错。自然，在这种大数问题中我肯定考虑到了类型的范围的问题，所以，开始我使用的<code>value</code>变量是<code>Long</code>类型，然后惊奇地发现<code>Long</code>类型居然也无法容下这个四十亿的数，只有换成<code>unsigned Long</code>类型才能容纳。</p>

<p>一阵迷糊后才明白原来是因为蓝桥的测评环境与我本地的环境不同导致的。在不同位数的编译器环境中，int，long等类型占用的空间并不一样，c语言标准并没有严格规定，所以这可能会出现某些计算机中Long类型和其他计算机的int类型同样范围的情况。</p>

<p>这里先挖个坑，后面学习研究到的时候再来深入探讨。。。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[十六进制转八进制之大数问题的处理]]></title>
    <link href="https://mrfant.github.io/blog/2017/11/24/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E8%BD%AC%E5%85%AB%E8%BF%9B%E5%88%B6%E4%B9%8B%E5%A4%A7%E6%95%B0%E9%97%AE%E9%A2%98%E7%9A%84%E5%A4%84%E7%90%86/"/>
    <updated>2017-11-24T17:19:52+08:00</updated>
    <id>https://mrfant.github.io/blog/2017/11/24/十六进制转八进制之大数问题的处理</id>
    <content type="html"><![CDATA[<blockquote><p><strong>问题描述</strong>
　　给定n个十六进制正整数，输出它们对应的八进制数。</p>

<p><strong>输入格式</strong>
　　输入的第一行为一个正整数n （1&lt;=n&lt;=10）。
　　接下来n行，每行一个由0~9、大写字母A~F组成的字符串，表示要转换的十六进制正整数，每个十六进制数长度不超过100000。</p>

<p><strong>输出格式</strong>
　　输出n行，每行为输入对应的八进制正整数。</p></blockquote>

<!-- more -->


<blockquote><p>　　<strong>【注意</strong>】
　　输入的十六进制数不会有前导0，比如012A。
　　输出的八进制数也不能有前导0。</p>

<p><strong>样例输入</strong>
　　2
　　39
　　123ABC</p>

<p><strong>样例输出</strong>
　　71
　　4435274</p>

<p>　　<strong>【提示</strong>】
　　先将十六进制数转换成某进制数，再由某进制数转换成八进制。</p></blockquote>

<p>这道题目的关键在于处理的数据位数，题目要求转换的十六进制数长度不超过十万位，十万位的十六进制数据是不可能由常规的数据类型来存储，只能存储为字符串类型。把输入存储为字符串类型后，就可以对其进行转换了，转换有以下几种思路：</p>

<p>一、将字符串中的每一位十六进制数转换为二进制数，再3位3位得将二进制数组合成八进制输出，这也是题目hints的思路，网上大多数都是以此为解。</p>

<p>二、第二个思路就是我自己所想的了，剑走偏锋，另辟蹊径。主要是：由于一位十六进制数的二进制为是四位，而八进制的二进制为是三位，所以3个十六进制数可以转换为4个八进制数。所以可以对输入的十六进制字符串3位3位得进行处理，转换为int类型的值，再在输出时利用规则漏洞<code>cout&lt;&lt;oct&lt;&lt;value;</code> 直接输出这3位十六进制数的八进制表示。这种方法算是一种“凑输出”的“作弊”手段吧，但是这毕竟是做题，而且算法结果确实能够提高效率，故不失为一种好方法。</p>

<h3>算法细节：</h3>

<p>前缀数的处理：</p>

<p>由于是对输入字符串的每3位进行处理，但是字符串位数不一定是3的倍数，所以需对字符串前面几个前缀数字进行特殊处理。</p>

<p>容易忽略的一点就是，在第二种方法中对字符串后面的每次三位处理的过程中由于是直接输出3位十六进制数的（先转换成int型）八进制表示，所以有可能出现漏输出0位的情况（如把0x1FF输出成“777”，正确的应该输出“0777”）为避免漏位，故需对该值进行分情况处理。我就是在这里摔了跤，忽略了细节。。。。</p>

<p>思路一源码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">k</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">string</span> <span class="n">s1</span><span class="p">,</span><span class="n">s2</span><span class="p">;</span><span class="c1">//s1为输入的原始的十六进制串，s2为转化成的二进制串</span>
</span><span class='line'>        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">s1</span><span class="p">;</span>
</span><span class='line'>        <span class="n">s2</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="p">;</span><span class="c1">//初始化</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">s1</span><span class="p">.</span><span class="n">length</span><span class="p">();</span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="c1">//遍历，字符串上加上每一位</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">switch</span><span class="p">(</span><span class="n">s1</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">case</span> <span class="sc">&#39;0&#39;</span><span class="o">:</span><span class="n">s2</span><span class="o">+=</span><span class="s">&quot;0000&quot;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="sc">&#39;1&#39;</span><span class="o">:</span><span class="n">s2</span><span class="o">+=</span><span class="s">&quot;0001&quot;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="sc">&#39;2&#39;</span><span class="o">:</span><span class="n">s2</span><span class="o">+=</span><span class="s">&quot;0010&quot;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="sc">&#39;3&#39;</span><span class="o">:</span><span class="n">s2</span><span class="o">+=</span><span class="s">&quot;0011&quot;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="sc">&#39;4&#39;</span><span class="o">:</span><span class="n">s2</span><span class="o">+=</span><span class="s">&quot;0100&quot;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="sc">&#39;5&#39;</span><span class="o">:</span><span class="n">s2</span><span class="o">+=</span><span class="s">&quot;0101&quot;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="sc">&#39;6&#39;</span><span class="o">:</span><span class="n">s2</span><span class="o">+=</span><span class="s">&quot;0110&quot;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="sc">&#39;7&#39;</span><span class="o">:</span><span class="n">s2</span><span class="o">+=</span><span class="s">&quot;0111&quot;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="sc">&#39;8&#39;</span><span class="o">:</span><span class="n">s2</span><span class="o">+=</span><span class="s">&quot;1000&quot;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="sc">&#39;9&#39;</span><span class="o">:</span><span class="n">s2</span><span class="o">+=</span><span class="s">&quot;1001&quot;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="sc">&#39;A&#39;</span><span class="o">:</span><span class="n">s2</span><span class="o">+=</span><span class="s">&quot;1010&quot;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="sc">&#39;B&#39;</span><span class="o">:</span><span class="n">s2</span><span class="o">+=</span><span class="s">&quot;1011&quot;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="sc">&#39;C&#39;</span><span class="o">:</span><span class="n">s2</span><span class="o">+=</span><span class="s">&quot;1100&quot;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="sc">&#39;D&#39;</span><span class="o">:</span><span class="n">s2</span><span class="o">+=</span><span class="s">&quot;1101&quot;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="sc">&#39;E&#39;</span><span class="o">:</span><span class="n">s2</span><span class="o">+=</span><span class="s">&quot;1110&quot;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="sc">&#39;F&#39;</span><span class="o">:</span><span class="n">s2</span><span class="o">+=</span><span class="s">&quot;1111&quot;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">default</span><span class="o">:</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">len</span><span class="o">=</span><span class="n">s2</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">len</span><span class="o">%</span><span class="mi">3</span><span class="o">==</span><span class="mi">1</span><span class="p">)</span><span class="c1">//三个二进制为一位八进制，二进制串前面补0，确保二进制串的长度为3的倍数</span>
</span><span class='line'>            <span class="n">s2</span><span class="o">=</span><span class="s">&quot;00&quot;</span><span class="o">+</span><span class="n">s2</span><span class="p">;</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">len</span><span class="o">%</span><span class="mi">3</span><span class="o">==</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>            <span class="n">s2</span><span class="o">=</span><span class="s">&quot;0&quot;</span><span class="o">+</span><span class="n">s2</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">flag</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="c1">//对前缀数字的处理</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">s2</span><span class="p">.</span><span class="n">length</span><span class="p">();</span><span class="n">i</span><span class="o">+=</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">num</span><span class="o">=</span><span class="mi">4</span><span class="o">*</span><span class="p">(</span><span class="n">s2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-</span><span class="sc">&#39;0&#39;</span><span class="p">)</span><span class="o">+</span><span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="n">s2</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="sc">&#39;0&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="n">s2</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">-</span><span class="sc">&#39;0&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'>                <span class="n">flag</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="c1">//忽略前导0</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">flag</span><span class="p">)</span>
</span><span class='line'>                <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">num</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是网上一博主的源码，比较具有代表性。</p>

<p>思路二源码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="c1">//#include &lt;string&gt;</span>
</span><span class='line'><span class="n">using</span> <span class="n">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">str2int</span><span class="p">(</span><span class="kt">char</span> <span class="n">c</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">c</span><span class="o">&gt;=</span><span class="sc">&#39;A&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">c</span><span class="o">-</span><span class="sc">&#39;A&#39;</span><span class="o">+</span><span class="mi">10</span><span class="p">;</span>   <span class="c1">//for A==10</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">return</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">c</span><span class="o">-</span><span class="sc">&#39;0&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="c1">//int str2int(char c);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="n">string</span> <span class="n">str</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">strLength</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">prex</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">str</span><span class="p">;</span>
</span><span class='line'>        <span class="n">strLength</span><span class="o">=</span><span class="n">str</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
</span><span class='line'>        <span class="c1">//value=0;</span>
</span><span class='line'>        <span class="n">prex</span><span class="o">=</span><span class="n">strLength</span><span class="o">%</span><span class="mi">3</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">//以下是对前面几个数字对特殊处理</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">prex</span><span class="o">==</span><span class="mi">2</span><span class="p">){</span>
</span><span class='line'>            <span class="n">value</span><span class="o">=</span><span class="n">str2int</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">*</span><span class="mi">16</span><span class="o">+</span><span class="n">str2int</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>            <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">oct</span><span class="o">&lt;&lt;</span><span class="n">value</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">prex</span><span class="o">==</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>            <span class="n">value</span><span class="o">=</span><span class="n">str2int</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>            <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">oct</span><span class="o">&lt;&lt;</span><span class="n">value</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(;</span><span class="n">prex</span><span class="o">&lt;</span><span class="n">strLength</span><span class="p">;</span><span class="n">prex</span><span class="o">+=</span><span class="mi">3</span><span class="p">){</span>
</span><span class='line'>            <span class="c1">//每3位处理</span>
</span><span class='line'>            <span class="n">value</span><span class="o">=</span><span class="n">str2int</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">prex</span><span class="p">])</span><span class="o">*</span><span class="mi">16</span><span class="o">*</span><span class="mi">16</span><span class="o">+</span><span class="n">str2int</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">prex</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span><span class="o">*</span><span class="mi">16</span><span class="o">+</span><span class="n">str2int</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">prex</span><span class="o">+</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">prex</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">//补0以防止漏位</span>
</span><span class='line'>                <span class="c1">// 0777的十进制表示为512，0077为 63 ，0007为 7</span>
</span><span class='line'>                <span class="c1">// 故分别补0</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">value</span><span class="o">&lt;</span><span class="mi">512</span><span class="o">&amp;&amp;</span><span class="n">value</span><span class="o">&gt;</span><span class="mi">63</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">value</span> <span class="o">&lt;=</span><span class="mi">63</span><span class="o">&amp;&amp;</span><span class="n">value</span><span class="o">&gt;</span><span class="mi">7</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;00&quot;</span><span class="p">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">value</span><span class="o">&lt;=</span><span class="mi">7</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;000&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">oct</span><span class="o">&lt;&lt;</span><span class="n">value</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>两种方法输入系统的结果如下，方法二为第一条。</p>

<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1flt25pxwe7j30vc0680to.jpg" alt="对比" /></p>

<p>可见方法二在代码长度，cpu使用时间和内存使用上都比方法一优越。</p>

<p>但是这只是一个浅显的对比，两种算法都没有优化，在此仅提供一种思路，没有优劣之分。。。。。。。</p>

<h2>反思</h2>

<p>1、细节之处一定要多注意。</p>

<p>2、对蓝桥杯的输入输出的判罚机制有了更多了解，原来可以不用把输入全部输进去再输出结果，如本方法中的源码一般输入一条，输出一条也是可以的。</p>

<p>3、对本题方法一中的str.Length() 的 i为int型有点疑惑，因为之前总结出的蓝桥杯的编译系统为8位或16位，int类型应该存储不下十万这么大的数才对，但此处证明可以，有些疑惑，先挖个坑，到时候填。。。。。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一道题引出的Unix-Fork函数解析]]></title>
    <link href="https://mrfant.github.io/blog/2017/11/24/Unix-Fork%E5%87%BD%E6%95%B0/"/>
    <updated>2017-11-24T17:19:52+08:00</updated>
    <id>https://mrfant.github.io/blog/2017/11/24/Unix-Fork函数</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="c1">//可产生20个进程，包括main进程</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">fork</span><span class="p">();</span>
</span><span class='line'>    <span class="n">fork</span><span class="p">()</span><span class="o">&amp;&amp;</span><span class="n">fork</span><span class="p">()</span><span class="o">||</span><span class="n">fork</span><span class="p">();</span>
</span><span class='line'>    <span class="n">fork</span><span class="p">();</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;+  </span><span class="se">\n\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->

]]></content>
  </entry>
  
</feed>
