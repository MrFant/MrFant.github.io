<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[YII Fant's Blog]]></title>
  <link href="https://mrfant.github.io/atom.xml" rel="self"/>
  <link href="https://mrfant.github.io/"/>
  <updated>2018-09-03T17:20:28+08:00</updated>
  <id>https://mrfant.github.io/</id>
  <author>
    <name><![CDATA[Yii]]></name>
    <email><![CDATA[yii.fant@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Spring Security注销logout操作解析]]></title>
    <link href="https://mrfant.github.io/blog/2018/09/03/spring-securityzhu-xiao-logoutcao-zuo-jie-xi/"/>
    <updated>2018-09-03T17:16:02+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/09/03/spring-securityzhu-xiao-logoutcao-zuo-jie-xi</id>
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/09/03/5b8cfc630f43a.png" alt="spring security" />
<strong>csrf protection is enable default</strong></p>

<pre><code>所以想用get请求来实现注销操作首先要把csrf关掉。
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">http</span><span class="o">.</span><span class="na">csrf</span><span class="o">().</span><span class="na">disable</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>第二种方法：
不需要关闭csrf，直接调用相关方法：
就可以用get请求来logout</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span><span class="o">=</span><span class="s">&quot;/logout&quot;</span><span class="o">,</span> <span class="n">method</span> <span class="o">=</span> <span class="n">RequestMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="n">String</span> <span class="nf">logoutPage</span> <span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">Authentication</span> <span class="n">auth</span> <span class="o">=</span> <span class="n">SecurityContextHolder</span><span class="o">.</span><span class="na">getContext</span><span class="o">().</span><span class="na">getAuthentication</span><span class="o">();</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">auth</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>      <span class="k">new</span> <span class="nf">SecurityContextLogoutHandler</span><span class="o">().</span><span class="na">logout</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">auth</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="k">return</span> <span class="s">&quot;redirect:/login?logout&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Security4实现方法级别安全控制[转载]]]></title>
    <link href="https://mrfant.github.io/blog/2018/09/03/spring-security4shi-xian-fang-fa-ji-bie-an-quan-kong-zhi/"/>
    <updated>2018-09-03T16:54:42+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/09/03/spring-security4shi-xian-fang-fa-ji-bie-an-quan-kong-zhi</id>
    <content type="html"><![CDATA[<p>原文地址： <a href="http://websystique.com/spring-security/spring-security-4-method-security-using-preauthorize-postauthorize-secured-el/">http://websystique.com/spring-security/spring-security-4-method-security-using-preauthorize-postauthorize-secured-el/</a>
译文地址： <a href="https://blog.csdn.net/w605283073/article/details/51327182">https://blog.csdn.net/w605283073/article/details/51327182</a></p>

<p><code>@Secured</code> 注解不能指定AND这个条件，比如指定某个方法只能被拥有ADMIN和DBA身份的用户调用。
但是用<code>@PreAuthorize/@PostAuthorize</code>注解可以实现，这两个注解支持<strong>Spring EL</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring MVC /error映射和自定义方法]]></title>
    <link href="https://mrfant.github.io/blog/2018/09/03/spring-mvc-slash-errorying-she-he-zi-ding-yi-fang-fa/"/>
    <updated>2018-09-03T16:48:36+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/09/03/spring-mvc-slash-errorying-she-he-zi-ding-yi-fang-fa</id>
    <content type="html"><![CDATA[<p>/error映射是一个特殊映射，当在template中创建了error.html页面后，发生错误后会自动映射到/error上.</p>

<pre><code>所以创建controller时，不要创建“/error”映射，会无法map到。
</code></pre>

<blockquote><p>错误页面和Spring Security 的Access_Denied页面是不同的！</p></blockquote>

<p>自定义的异常处理参考这篇博客：
<a href="http://blog.didispace.com/springbootexception/">http://blog.didispace.com/springbootexception/</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@ControllerAdvice</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">GlobalExceptionHandler</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">DEFAULT_ERROR_VIEW</span> <span class="o">=</span> <span class="s">&quot;error&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@ExceptionHandler</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="n">Exception</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">ModelAndView</span> <span class="nf">defaultErrorHandler</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">req</span><span class="o">,</span> <span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">ModelAndView</span> <span class="n">mav</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">ModelAndView</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">mav</span><span class="o">.</span><span class="na">addObject</span><span class="o">(</span><span class="s">&quot;exception&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">mav</span><span class="o">.</span><span class="na">addObject</span><span class="o">(</span><span class="s">&quot;url&quot;</span><span class="o">,</span> <span class="n">req</span><span class="o">.</span><span class="na">getRequestURL</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">mav</span><span class="o">.</span><span class="na">setViewName</span><span class="o">(</span><span class="n">DEFAULT_ERROR_VIEW</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">mav</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Php连接数据库实的一个不起眼bug]]></title>
    <link href="https://mrfant.github.io/blog/2018/09/03/phplian-jie-shu-ju-ku-shi-de-%5B%3F%5D-ge-bu-qi-yan-bug/"/>
    <updated>2018-09-03T16:44:23+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/09/03/phplian-jie-shu-ju-ku-shi-de-[?]-ge-bu-qi-yan-bug</id>
    <content type="html"><![CDATA[<p>在安装<strong>wordpress连接数据库</strong>的时候也出现了这个bug，太难以发觉了</p>

<p>使用mysqli：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nv">$servername</span> <span class="o">=</span> <span class="nx">“127</span><span class="o">.</span><span class="mf">0.0</span><span class="o">.</span><span class="mi">1</span><span class="nx">”</span><span class="p">;</span>  <span class="c1">//这里不能用localhost，必须为数字</span>
</span><span class='line'><span class="nv">$username</span> <span class="o">=</span> <span class="s2">&quot;username”; </span>
</span><span class='line'><span class="si">$password</span><span class="s2"> = &quot;</span><span class="nx">password”</span><span class="p">;</span>
</span><span class='line'><span class="c1">// 创建连接</span>
</span><span class='line'><span class="nv">$conn</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">mysqli</span><span class="p">(</span><span class="nv">$servername</span><span class="p">,</span> <span class="nv">$username</span><span class="p">,</span> <span class="nv">$password</span><span class="p">);</span>
</span><span class='line'><span class="c1">// 检测连接</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nv">$conn</span><span class="o">-&gt;</span><span class="na">connect_error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">die</span><span class="p">(</span><span class="s2">&quot;连接失败: &quot;</span> <span class="o">.</span> <span class="nv">$conn</span><span class="o">-&gt;</span><span class="na">connect_error</span><span class="p">);</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'> <span class="k">echo</span> <span class="s2">&quot;连接成功”;</span>
</span><span class='line'><span class="s2"> ?&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>同样，使用PDO时：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nv">$servername</span> <span class="o">=</span> <span class="s2">&quot;127.0.0.1&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$username</span> <span class="o">=</span> <span class="s2">&quot;root&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$password</span> <span class="o">=</span> <span class="s2">&quot;password&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$conn</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PDO</span><span class="p">(</span><span class="s2">&quot;mysql:host=</span><span class="si">$servername</span><span class="s2">;&quot;</span><span class="p">,</span> <span class="nv">$username</span><span class="p">,</span> <span class="nv">$password</span><span class="p">);</span>
</span><span class='line'>    <span class="k">echo</span> <span class="s2">&quot;连接成功&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">catch</span><span class="p">(</span><span class="nx">PDOException</span> <span class="nv">$e</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">echo</span> <span class="nv">$e</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 全局变量与global关键字]]></title>
    <link href="https://mrfant.github.io/blog/2018/09/03/python-quan-ju-bian-liang-yu-globalguan-jian-zi/"/>
    <updated>2018-09-03T09:51:37+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/09/03/python-quan-ju-bian-liang-yu-globalguan-jian-zi</id>
    <content type="html"><![CDATA[<p>在python开发使用<strong>全局变量</strong>的时候，会经常遇到一个奇怪的问题：
如下代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">num</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">def</span> <span class="nf">Func</span><span class="p">():</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">num</span>
</span><span class='line'>    <span class="n">num</span><span class="o">=</span><span class="n">num</span><span class="o">+</span><span class="mi">1</span>
</span><span class='line'><span class="n">Func</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行后出现这样的错误：</p>

<pre><code>Traceback (most recent call last):
File "test.py", line 5, in &lt;module&gt;
    Func()
File "test.py", line 3, in Func
    print num
UnboundLocalError: local variable 'num' referenced before assignment
</code></pre>

<p>意思是 num是一个局部变量，并且在赋值前就引用的错误。
分析可知，python解释器并没有将num变量当作一个全局变量，而是函数内部的局部变量。</p>

<p>查阅文档之后可知，python的全局变量的作用域是整篇代码，在函数之中可以<strong>引用</strong>全局变量的值，但是如果要<strong>修改</strong>它，就会把它当作函数内部的局部变量。
要想引用并修改全局变量必须在变量前面加上<code>global关键字</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">num</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">def</span> <span class="nf">Func</span><span class="p">():</span>
</span><span class='line'>    <span class="o">//</span> <span class="err">哪个函数要修改全局变量，都要在函数前声明一下</span>
</span><span class='line'>    <span class="k">global</span> <span class="n">num</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">num</span>
</span><span class='line'>    <span class="n">num</span><span class="o">=</span><span class="n">num</span><span class="o">+</span><span class="mi">1</span>
</span><span class='line'><span class="n">Func</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是有一个函数例外，那就是<strong>主函数</strong>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">num</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span><span class="o">==</span><span class="s">&quot;__main__&quot;</span><span class="p">:</span>
</span><span class='line'>    <span class="o">//</span><span class="err">在主函数里可以正常运行，不需</span><span class="k">global</span><span class="err">声明</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">num</span>
</span><span class='line'>    <span class="n">num</span><span class="o">=</span><span class="n">num</span><span class="o">+</span><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown中插入html代码的坑]]></title>
    <link href="https://mrfant.github.io/blog/2018/09/02/markdownzhong-cha-ru-htmldai-ma-de-keng/"/>
    <updated>2018-09-02T10:38:20+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/09/02/markdownzhong-cha-ru-htmldai-ma-de-keng</id>
    <content type="html"><![CDATA[<p>Pygments 是个好工具，能够让markdown里的代码片段高亮显示，没有这货的存在，整个博文加上代码难免显得枯燥乏味。
但是在使用pygemnts，也就是在markdown写作的过程中插入代码时也有许多的坑，特别是插入html代码时。
由于markdown是一种标记语言，它会由解析器解析为html文本，所以为了<strong>安全考虑</strong>，
在mardown中插入html代码时就有许多禁忌。</p>

<pre><code>插入html代码时，必须让html代码用tab内嵌，当然最好用html代码块包裹
</code></pre>

<!-- more -->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Js-jquery-get-htm5-dataattr[转载]]]></title>
    <link href="https://mrfant.github.io/blog/2018/09/02/js-jquery-get-htm5-dataattr/"/>
    <updated>2018-09-02T00:16:47+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/09/02/js-jquery-get-htm5-dataattr</id>
    <content type="html"><![CDATA[<p><a href="https://segmentfault.com/a/1190000005770912">原文链接</a></p>

<p>今天做项目的时候发现一个坑，关于jQuery获取data-*属性的方法data()，特写此篇来记录。</p>

<blockquote><p>HTML5规定可以为元素添加非标准型的属性，只需添加前缀data-，这些属性可以随意添加，随意命名，目的是为元素提供与渲染无关的信息，或提供语义信息。</p></blockquote>

<h2>js获取data-*的方式</h2>

<h3>通过dataset属性访问</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;myDiv&quot;</span><span class="na">data-appid=</span><span class="s">&quot;123&quot;</span> <span class="na">data-myname=</span><span class="s">&quot;lsxj&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;myDiv&quot;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">appId</span> <span class="o">=</span> <span class="nx">div</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">appid</span><span class="p">;</span><span class="c1">//获取data-appid的值</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">myName</span> <span class="o">=</span> <span class="nx">div</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">myname</span><span class="p">;</span><span class="c1">//获取data-myname的值</span>
</span><span class='line'><span class="c1">//设置值</span>
</span><span class='line'><span class="nx">div</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">appid</span> <span class="o">=</span> <span class="mi">456</span><span class="p">;</span>
</span><span class='line'><span class="nx">div</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">myname</span> <span class="o">=</span> <span class="s2">&quot;newname&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>最终HTML结果</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;myDiv&quot;</span> <span class="na">data-appid=</span><span class="s">&quot;456&quot;</span> <span class="na">data-myname=</span><span class="s">&quot;newname&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>dataset属性的值是DOMStringMap的一个实例，名值对的映射。每个data-name形式的属性都有一个对应的属性，只不过该属性名没有data-前缀。</p>

<p>需要注意的是，dataset中大小写的问题。带连字符连接的名称在使用的时候需要命名驼峰化。例如data-my-name对应的是dataset.myName的值。可看以下代码</p>

<p>//将上面代码的设置值部分进行修改</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">div</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">appId</span> <span class="o">=</span> <span class="mi">789</span><span class="p">;</span>
</span><span class='line'><span class="nx">div</span><span class="p">.</span><span class="nx">dataset</span><span class="p">.</span><span class="nx">myName</span> <span class="o">=</span> <span class="s2">&quot;secondname&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>最终结果:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;myDiv&quot;</span> <span class="na">data-appid=</span><span class="s">&quot;123&quot;</span> <span class="na">data-myname=</span><span class="s">&quot;lsxj&quot;</span> <span class="na">data-app-id=</span><span class="s">&quot;456&quot;</span> <span class="na">data-my-name=</span><span class="s">&quot;secondname&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>传统获取方式 getAttribute</h3>

<p>还是上述的例子。获取data-*的方法可使用如下方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">appId</span> <span class="o">=</span> <span class="nx">div</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s2">&quot;data-appid&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// jQuery获取方法</span>
</span><span class='line'><span class="c1">// data()方法</span>
</span><span class='line'><span class="c1">//获取属性</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">appid</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#myDiv&quot;</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;appid&quot;</span><span class="p">);</span> <span class="c1">//123</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">app_id</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#myDiv&quot;</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;app-id&quot;</span><span class="p">);</span> <span class="c1">//456</span>
</span><span class='line'><span class="c1">//属性赋值</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#myDiv&quot;</span><span class="p">).</span><span class="nx">data</span><span class="p">(</span><span class="s2">&quot;appid&quot;</span><span class="p">,</span><span class="s2">&quot;666&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1">//最终HTML代码</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;myDiv&quot;</span> <span class="na">data-appid=</span><span class="s">&quot;456&quot;</span> <span class="na">data-myname=</span><span class="s">&quot;newname&quot;</span><span class="nt">&gt;&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>需要注意的是，data()的值进行修改并不会影响到DOM元素上的data-*属性的改变。data()的本质其实是将一个 “cache” 附加到了对象上，并使用了一个特殊的属性名称。
所以上述代码中，虽然对div进行了data()赋值操作，但HTML代码中div的data-appid的值仍然为123，因为data()只是修改了缓存的那个值，此时进行$(&lsquo;#myDiv&rsquo;).data(&ldquo;appid&rdquo;)的操作，输出的结果为666.</p></blockquote>

<h3>attr()方法</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">appid</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#myDiv&quot;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s2">&quot;data-appid&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>参考资料：</p>

<ul>
<li>jQuery官方文档</li>
<li>jQuery.data()和HTML5之data-属性</li>
<li>jQuery.data() 的实现方式</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Function-and-exclamation-mark[转载]]]></title>
    <link href="https://mrfant.github.io/blog/2018/09/01/function-and-exclamation-mark/"/>
    <updated>2018-09-01T23:52:32+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/09/01/function-and-exclamation-mark</id>
    <content type="html"><![CDATA[<p>博客转载至：</p>

<p><a href="https://swordair.com/function-and-exclamation-mark/">原文链接</a></p>

<blockquote><p>匿名函数的声明和执行要区分开</p></blockquote>

<p>问题：如果在function之前加上感叹号 (!) 会怎么样？比如下面的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="o">!</span><span class="kd">function</span><span class="p">(){</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;iifksp&#39;</span><span class="p">)}()</span>        <span class="c1">// true</span>
</span></code></pre></td></tr></table></div></figure>


<p>在控制台运行后得到的值时true，为什么是true这很容易理解，因为这个匿名函数没有返回值，默认返回的就是undefined，求反的结果很自然的就是true。所以问题并不在于结果值，而是在于，</p>

<blockquote><p><strong>为什么求反操作能够让一个匿名函数的自调变的合法？</strong></p></blockquote>

<!-- more -->


<p>平时我们可能对添加括号来调用匿名函数的方式更为习惯：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;iifksp&#39;</span><span class="p">)})()</span>        <span class="c1">// undefined</span>
</span><span class='line'><span class="c1">//或者：</span>
</span><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;iifksp&#39;</span><span class="p">)}())</span>        <span class="c1">// undefined</span>
</span></code></pre></td></tr></table></div></figure>


<p>虽然上述两者括号的位置不同，不过效果完全一样。
那么，
<strong>是什么好处使得为数不少的人对这种叹号的方式情有独钟？</strong>
如果只是为了节约一个字符未免太没有必要了，这样算来即使一个100K的库恐怕也节省不了多少空间。既然不是空间，那么就是说也许还有时间上的考量，事实很难说清，文章的最后有提到<strong>性能</strong>。
回到核心问题，为什么能这么做？甚至更为核心的问题是，为什么必须这么做？</p>

<blockquote><p>其实无论是括号，还是感叹号，让整个语句合法做的事情只有一件，就是让一个函数声明语句变成了一个表达式。</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">function</span> <span class="nx">a</span><span class="p">(){</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;iifksp&#39;</span><span class="p">)}</span>        <span class="c1">// undefined</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//这是一个函数声明，如果在这么一个声明后直接加上括号调用，解析器自然不会理解而报错：</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">a</span><span class="p">(){</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;iifksp&#39;</span><span class="p">)}()</span>        <span class="c1">// SyntaxError: unexpected_token</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为这样的代码<strong>混淆了函数声明和函数调用</strong>，以这种方式声明的函数 a，就应该以 a(); 的方式调用。</p>

<p>但是括号则不同，<strong>它将一个函数声明转化成了一个表达式</strong>，解析器不再以函数声明的方式处理函数a，而是作为一个函数表达式处理，也因此只有在程序执行到函数a时它才能被访问。</p>

<blockquote><p>所以，任何消除函数声明和函数表达式间歧义的方法，都可以被解析器正确识别。</p></blockquote>

<p>比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="mi">10</span><span class="p">}();</span> <span class="c1">//赋值        // undefined</span>
</span><span class='line'><span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="kc">true</span><span class="p">}();</span>        <span class="c1">// true</span>
</span><span class='line'><span class="mi">1</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;iifksp&#39;</span><span class="p">)}();</span>        <span class="c1">// undefined</span>
</span><span class='line'><span class="c1">// 赋值，逻辑，甚至是逗号，各种操作符都可以告诉解析器，</span>
</span><span class='line'><span class="c1">// 这个不是函数声明，它是个函数表达式。</span>
</span><span class='line'><span class="c1">// 并且，对函数一元运算可以算的上是消除歧义最快的方式，</span>
</span><span class='line'><span class="c1">// 感叹号只是其中之一，如果不在乎返回值，这些一元运算都是有效的：</span>
</span><span class='line'><span class="o">!</span><span class="kd">function</span><span class="p">(){</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;iifksp&#39;</span><span class="p">)}()</span>        <span class="c1">// true</span>
</span><span class='line'><span class="o">+</span><span class="kd">function</span><span class="p">(){</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;iifksp&#39;</span><span class="p">)}()</span>        <span class="c1">// NaN</span>
</span><span class='line'><span class="o">-</span><span class="kd">function</span><span class="p">(){</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;iifksp&#39;</span><span class="p">)}()</span>        <span class="c1">// NaN</span>
</span><span class='line'><span class="o">~</span><span class="kd">function</span><span class="p">(){</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;iifksp&#39;</span><span class="p">)}()</span>        <span class="c1">// -1</span>
</span><span class='line'><span class="c1">// 甚至下面这些关键字，都能很好的工作：</span>
</span><span class='line'><span class="k">void</span> <span class="kd">function</span><span class="p">(){</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;iifksp&#39;</span><span class="p">)}()</span>        <span class="c1">// undefined</span>
</span><span class='line'><span class="k">new</span> <span class="kd">function</span><span class="p">(){</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;iifksp&#39;</span><span class="p">)}()</span>        <span class="c1">// Object</span>
</span><span class='line'><span class="k">delete</span> <span class="kd">function</span><span class="p">(){</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;iifksp&#39;</span><span class="p">)}()</span>        <span class="c1">// true</span>
</span><span class='line'><span class="c1">// 最后，括号做的事情也是一样的，消除歧义才是它真正的工作，</span>
</span><span class='line'><span class="c1">// 而不是把函数作为一个整体，所以无论括号括在声明上还是把整个函数都括在里面，都是合法的：</span>
</span><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;iifksp&#39;</span><span class="p">)})()</span>        <span class="c1">// undefined</span>
</span><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;iifksp&#39;</span><span class="p">)}())</span>        <span class="c1">// undefined</span>
</span></code></pre></td></tr></table></div></figure>


<p>说了这么多，实则在说的一些都是最为基础的概念——语句，表达式，表达式语句，这些概念如同指针与指针变量一样容易产生混淆。虽然这种混淆对编程无表征影响，但却是一块绊脚石随时可能因为它而头破血流。</p>

<hr />

<p>最后讨论下性能。我在jsperf上简单建立了一个测试：<a href="http://jsperf.com/js-funcion-expression-speed">http://jsperf.com/js-funcion-expression-speed</a> ，可以用不同浏览器访问，运行测试查看结果。我也同时将结果罗列如下表所示（由于我比较穷，测试配置有点丢人不过那也没办法：奔腾双核1.4G，2G内存，win7企业版）：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Option</span> <span class="nx">Code</span>    <span class="nx">Ops</span><span class="o">/</span><span class="nx">sec</span>
</span><span class='line'><span class="nx">Chrome</span> <span class="mi">13</span> <span class="nx">Firefox</span> <span class="mi">6</span>   <span class="nx">IE9</span> <span class="nx">Safari</span> <span class="mi">5</span>
</span><span class='line'><span class="o">!</span>  <span class="o">!</span><span class="kd">function</span><span class="p">(){;}()</span>  <span class="mi">3</span><span class="p">,</span><span class="mi">773</span><span class="p">,</span><span class="mi">196</span> <span class="mi">10</span><span class="p">,</span><span class="mi">975</span><span class="p">,</span><span class="mi">198</span>    <span class="mi">572</span><span class="p">,</span><span class="mi">694</span>  <span class="mi">2</span><span class="p">,</span><span class="mi">810</span><span class="p">,</span><span class="mi">197</span>
</span><span class='line'><span class="o">+</span>  <span class="o">+</span><span class="kd">function</span><span class="p">(){;}()</span>  <span class="mi">21</span><span class="p">,</span><span class="mi">553</span><span class="p">,</span><span class="mi">847</span>    <span class="mi">12</span><span class="p">,</span><span class="mi">135</span><span class="p">,</span><span class="mi">960</span>    <span class="mi">572</span><span class="p">,</span><span class="mi">694</span>  <span class="mi">1</span><span class="p">,</span><span class="mi">812</span><span class="p">,</span><span class="mi">238</span>
</span><span class='line'><span class="o">-</span>  <span class="o">-</span><span class="kd">function</span><span class="p">(){;}()</span>  <span class="mi">21</span><span class="p">,</span><span class="mi">553</span><span class="p">,</span><span class="mi">847</span>    <span class="mi">12</span><span class="p">,</span><span class="mi">135</span><span class="p">,</span><span class="mi">960</span>    <span class="mi">572</span><span class="p">,</span><span class="mi">694</span>  <span class="mi">1</span><span class="p">,</span><span class="mi">864</span><span class="p">,</span><span class="mi">155</span>
</span><span class='line'><span class="o">~</span>  <span class="o">~</span><span class="kd">function</span><span class="p">(){;}()</span>  <span class="mi">3</span><span class="p">,</span><span class="mi">551</span><span class="p">,</span><span class="mi">136</span> <span class="mi">3</span><span class="p">,</span><span class="mi">651</span><span class="p">,</span><span class="mi">652</span> <span class="mi">572</span><span class="p">,</span><span class="mi">694</span>  <span class="mi">1</span><span class="p">,</span><span class="mi">876</span><span class="p">,</span><span class="mi">002</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="kd">function</span><span class="p">(){;})()</span> <span class="mi">3</span><span class="p">,</span><span class="mi">914</span><span class="p">,</span><span class="mi">953</span> <span class="mi">12</span><span class="p">,</span><span class="mi">135</span><span class="p">,</span><span class="mi">960</span>    <span class="mi">572</span><span class="p">,</span><span class="mi">694</span>  <span class="mi">3</span><span class="p">,</span><span class="mi">025</span><span class="p">,</span><span class="mi">608</span>
</span><span class='line'><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="p">(</span><span class="kd">function</span><span class="p">(){;}())</span> <span class="mi">4</span><span class="p">,</span><span class="mi">075</span><span class="p">,</span><span class="mi">201</span> <span class="mi">12</span><span class="p">,</span><span class="mi">135</span><span class="p">,</span><span class="mi">960</span>    <span class="mi">572</span><span class="p">,</span><span class="mi">694</span>  <span class="mi">3</span><span class="p">,</span><span class="mi">025</span><span class="p">,</span><span class="mi">608</span>
</span><span class='line'><span class="k">void</span>   <span class="k">void</span> <span class="kd">function</span><span class="p">(){;}()</span>  <span class="mi">4</span><span class="p">,</span><span class="mi">030</span><span class="p">,</span><span class="mi">756</span> <span class="mi">12</span><span class="p">,</span><span class="mi">135</span><span class="p">,</span><span class="mi">960</span>    <span class="mi">572</span><span class="p">,</span><span class="mi">694</span>  <span class="mi">3</span><span class="p">,</span><span class="mi">025</span><span class="p">,</span><span class="mi">608</span>
</span><span class='line'><span class="k">new</span>    <span class="k">new</span> <span class="kd">function</span><span class="p">(){;}()</span>   <span class="mi">619</span><span class="p">,</span><span class="mi">606</span>  <span class="mi">299</span><span class="p">,</span><span class="mi">100</span>  <span class="mi">407</span><span class="p">,</span><span class="mi">104</span>  <span class="mi">816</span><span class="p">,</span><span class="mi">903</span>
</span><span class='line'><span class="k">delete</span> <span class="k">delete</span> <span class="kd">function</span><span class="p">(){;}()</span>    <span class="mi">4</span><span class="p">,</span><span class="mi">816</span><span class="p">,</span><span class="mi">225</span> <span class="mi">12</span><span class="p">,</span><span class="mi">135</span><span class="p">,</span><span class="mi">960</span>    <span class="mi">572</span><span class="p">,</span><span class="mi">694</span>  <span class="mi">2</span><span class="p">,</span><span class="mi">693</span><span class="p">,</span><span class="mi">524</span>
</span><span class='line'><span class="o">=</span>  <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){;}()</span>   <span class="mi">4</span><span class="p">,</span><span class="mi">984</span><span class="p">,</span><span class="mi">774</span> <span class="mi">12</span><span class="p">,</span><span class="mi">135</span><span class="p">,</span><span class="mi">960</span>    <span class="mi">565</span><span class="p">,</span><span class="mi">982</span>  <span class="mi">2</span><span class="p">,</span><span class="mi">602</span><span class="p">,</span><span class="mi">630</span>
</span><span class='line'><span class="o">&amp;&amp;</span> <span class="mi">1</span> <span class="o">&amp;&amp;</span> <span class="kd">function</span><span class="p">(){;}()</span>  <span class="mi">5</span><span class="p">,</span><span class="mi">307</span><span class="p">,</span><span class="mi">200</span> <span class="mi">4</span><span class="p">,</span><span class="mi">393</span><span class="p">,</span><span class="mi">486</span> <span class="mi">572</span><span class="p">,</span><span class="mi">694</span>  <span class="mi">2</span><span class="p">,</span><span class="mi">565</span><span class="p">,</span><span class="mi">645</span>
</span><span class='line'><span class="o">||</span> <span class="mi">0</span> <span class="o">||</span> <span class="kd">function</span><span class="p">(){;}()</span>  <span class="mi">5</span><span class="p">,</span><span class="mi">000</span><span class="p">,</span><span class="mi">000</span> <span class="mi">4</span><span class="p">,</span><span class="mi">406</span><span class="p">,</span><span class="mi">035</span> <span class="mi">572</span><span class="p">,</span><span class="mi">694</span>  <span class="mi">2</span><span class="p">,</span><span class="mi">490</span><span class="p">,</span><span class="mi">128</span>
</span><span class='line'><span class="o">&amp;</span>  <span class="mi">1</span> <span class="o">&amp;</span> <span class="kd">function</span><span class="p">(){;}()</span>   <span class="mi">4</span><span class="p">,</span><span class="mi">918</span><span class="p">,</span><span class="mi">209</span> <span class="mi">12</span><span class="p">,</span><span class="mi">135</span><span class="p">,</span><span class="mi">960</span>    <span class="mi">572</span><span class="p">,</span><span class="mi">694</span>  <span class="mi">1</span><span class="p">,</span><span class="mi">705</span><span class="p">,</span><span class="mi">551</span>
</span><span class='line'><span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="kd">function</span><span class="p">(){;}()</span>   <span class="mi">4</span><span class="p">,</span><span class="mi">859</span><span class="p">,</span><span class="mi">802</span> <span class="mi">12</span><span class="p">,</span><span class="mi">135</span><span class="p">,</span><span class="mi">960</span>    <span class="mi">572</span><span class="p">,</span><span class="mi">694</span>  <span class="mi">1</span><span class="p">,</span><span class="mi">612</span><span class="p">,</span><span class="mi">372</span>
</span><span class='line'><span class="o">^</span>  <span class="mi">1</span> <span class="o">^</span> <span class="kd">function</span><span class="p">(){;}()</span>   <span class="mi">4</span><span class="p">,</span><span class="mi">654</span><span class="p">,</span><span class="mi">916</span> <span class="mi">12</span><span class="p">,</span><span class="mi">135</span><span class="p">,</span><span class="mi">960</span>    <span class="mi">572</span><span class="p">,</span><span class="mi">694</span>  <span class="mi">1</span><span class="p">,</span><span class="mi">579</span><span class="p">,</span><span class="mi">778</span>
</span><span class='line'><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){;}()</span>    <span class="mi">4</span><span class="p">,</span><span class="mi">878</span><span class="p">,</span><span class="mi">193</span> <span class="mi">12</span><span class="p">,</span><span class="mi">135</span><span class="p">,</span><span class="mi">960</span>    <span class="mi">572</span><span class="p">,</span><span class="mi">694</span>  <span class="mi">2</span><span class="p">,</span><span class="mi">281</span><span class="p">,</span><span class="mi">186</span>
</span></code></pre></td></tr></table></div></figure>


<p>可见不同的方式产生的结果并不相同，而且，差别很大，因浏览器而异。
但我们还是可以从中找出很多共性：</p>

<p>new方法永远最慢——这也是理所当然的。</p>

<p>其它方面很多差距其实不大，但有一点可以肯定的是，感叹号并非最为理想的选择。反观传统的括号，在测试里表现始终很快，在大多数情况下比感叹号更快——所以平时我们常用的方式毫无问题，甚至可以说是最优的。加减号在chrome表现惊人，而且在其他浏览器下也普遍很快，相比感叹号效果更好。</p>

<p>当然这只是个简单测试，不能说明问题。但有些结论是有意义的：</p>

<blockquote><p><strong>括号和加减号最优。</strong></p></blockquote>

<p>但是为什么这么多开发者钟情于感叹号？我觉得这只是一个习惯问题，它们之间的优劣完全可以忽略。一旦习惯了一种代码风格，那么这种约定会使得程序从混乱变得可读。如果习惯了感叹号，我不得不承认，它比括号有更好的可读性。我不用在阅读时留意括号的匹配，也不用在编写时粗心遗忘——</p>

<p>当我也这么干然后嚷嚷着这居然又节省了一个字符而沾沾自喜的时候，却忘了自己仓皇翻出一本卷边的C语言教科书的窘迫和荒唐&hellip;&hellip;任何人都有忘记的时候，当再捡起来的时候，捡起的就已经不单单是忘掉的东西了。
2011-10-31更新：如果你使用aptana，那么在使用（!+-）时要注意一点，它们会让aptana的解析失效，导致Outline窗口没有任何显示。但是就代码本身而言，其运行没有任何问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jquery .ready() 与window.onload的区别]]></title>
    <link href="https://mrfant.github.io/blog/2018/09/01/jquery-ready-yu-window-dot-onloadde-qu-bie/"/>
    <updated>2018-09-01T23:15:26+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/09/01/jquery-ready-yu-window-dot-onloadde-qu-bie</id>
    <content type="html"><![CDATA[<h2>1.执行时间</h2>

<p>window.onload必须等到页面内包括<strong>图片</strong>的<strong>所有</strong>元素加载完毕后才能执行。
$(document).ready()是DOM结构绘制完毕后就执行，不必等到加载完毕。</p>

<h2>2.编写个数不同</h2>

<p>window.onload不能同时编写多个，如果有多个window.onload方法，只会执行一个
$(document).ready()可以同时编写多个，并且都可以得到执行</p>

<!-- more -->


<h2>3.简化写法</h2>

<pre><code>window.onload没有简化写法 

$(document).ready(function(){})
可以简写成:
$(function(){});
$(function(){});        //$()里面一个匿名函数
</code></pre>

<p>另外，需要注意一点，由于在 <code>$(document).ready()</code> 方法内注册的事件，只要 <strong>DOM 就绪</strong>就会被执行，因此可能此时元素的关联文件未下载完。例如与图片有关的 html 下载完毕，并且已经解析为 DOM 树了，但很有可能图片还没有加载完毕,所以例如<em>图片的高度和宽度</em>这样的属性此时不一定有效。
要解决这个问题，可以使用 Jquery 中另一个关于页面加载的方法 &mdash;<code>load()</code> 方法。 <code>load()</code> 方法会在元素的 onload 事件中绑定一个处理函数。如果处理函数绑定给 window 对象，则会在所有内容 ( 包括窗口、框架、对象和图像等 ) 加载完毕后触发，如果处理函数绑定在元素上，则会在元素的内容加载完毕后触发。</p>

<h3>代码如下：</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">window</span><span class="p">).</span><span class="nx">load</span><span class="p">(</span><span class="kd">function</span> <span class="p">(){</span>
</span><span class='line'>       <span class="c1">// 编写代码  </span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="c1">//等价于 JavaScript 中的以下代码 </span>
</span><span class='line'><span class="nx">Window</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(){</span>
</span><span class='line'>     <span class="c1">// 编写代码 </span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IntelliJ IDEA的inspections功能]]></title>
    <link href="https://mrfant.github.io/blog/2018/09/01/intellij-ideade-inspectionsgong-neng/"/>
    <updated>2018-09-01T23:13:14+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/09/01/intellij-ideade-inspectionsgong-neng</id>
    <content type="html"><![CDATA[<blockquote><p>Intellij idea的inspections功能非常智能，甚至可以成为菜鸟程序员的学习工具，借助于它可以规范自己的代码，完善风格，甚至大多数bug或error都能在inspections下无所遁形
但是在有些情况下我们也需要自定义inspections的相关功能，
以下记录我自定义的配置：</p></blockquote>

<ol>
<li><p>thymeleaf  的：expression variable validation ，由于tymeleaf的表达式定义在controller里，idea找不到其定义所以会报错，其实不影响运行，所以把这个inspect从error修改为warning。</p></li>
<li><p>xml 的unbound namespace prefixes  ， 这个也与thymeleaf有关，在一个项目中使用tymeleaf代码fragment时，由于th namespace没有bound，所以会不停报错，为了不影响，也把这个关了。</p></li>
</ol>


<!-- more -->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Server 超级全局变量表]]></title>
    <link href="https://mrfant.github.io/blog/2018/08/28/server-superglobal/"/>
    <updated>2018-08-28T00:00:00+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/08/28/server-superglobal</id>
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/09/01/5b8a803319eb0.jpg" alt="" /></p>

<!-- more -->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入理解JQuery中的on方法(事件委派机制)]]></title>
    <link href="https://mrfant.github.io/blog/2018/08/27/jQuery-on-methon/"/>
    <updated>2018-08-27T00:00:00+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/08/27/jQuery-on-methon</id>
    <content type="html"><![CDATA[<p>参考博客：<a href="https://segmentfault.com/a/1190000006652120">https://segmentfault.com/a/1190000006652120</a></p>

<h2>抛出问题：</h2>

<blockquote><p>jquery on()方法和click()等绑定事件监听函数的方法有什么区别?</p></blockquote>

<h2>demo：</h2>

<p>以下实例中原先的 HTML 元素点击其身后的 Delete 按钮就会被删除。而动态添加的 HTML 元素，使用 click() 这种写法，点击 Delete 按钮无法删除；使用 On() 方式可以。</p>

<p><a href="https://c.runoob.com/codedemo/5357">在线演示</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#newclick&quot;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.li&quot;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="s1">&#39;&lt;li&gt;动态添加的HTML元素click&lt;button class=&quot;deleteclick&quot;&gt;Delete&lt;/button&gt;&lt;/li&gt;&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#newon&quot;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.li&quot;</span><span class="p">).</span><span class="nx">append</span><span class="p">(</span><span class="s1">&#39;&lt;li&gt;动态添加的HTML元素on&lt;button class=&quot;deleteon&quot;&gt;Delete&lt;/button&gt;&lt;/li&gt;&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.delete&quot;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">parent</span><span class="p">().</span><span class="nx">remove</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.li&quot;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="s2">&quot;.deleteon&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">parent</span><span class="p">().</span><span class="nx">remove</span><span class="p">();</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;.deleteclick&quot;</span><span class="p">).</span><span class="nx">click</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">parent</span><span class="p">().</span><span class="nx">remove</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h2>结论：</h2>

<p>二者在绑定<strong>静态控件</strong>时没有区别，<em>但是</em>如果面对动态产生的控件，只有on()能成功的绑定到<strong>动态控件</strong>中。
{:.info}</p>

<h2>拓展</h2>

<p>许多项目在前后端交互时都采用ajax或pjax等技术动态添加新的控件。在这种情况下，就必须使用on（）方法来为新添加的元素绑定事件监听函数。
具体见参考博客</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[大数阶乘问题及内存分配的堆和栈区别]]></title>
    <link href="https://mrfant.github.io/blog/2017/11/24/the-big-num-mul/"/>
    <updated>2017-11-24T17:19:52+08:00</updated>
    <id>https://mrfant.github.io/blog/2017/11/24/the-big-num-mul</id>
    <content type="html"><![CDATA[<h2>问题描述：</h2>

<blockquote><p>问题描述</p>

<p>　　输入一个正整数<em>n</em>，输出<em>n</em>!的值。
　　其中<em>n</em>!=1<em>2</em>3<em>…**n</em>。</p>

<p>算法描述</p>

<p>　　<em>n</em>!可能很大，而计算机能表示的整数范围有限，需要使用高精度计算的方法。使用一个数组<em>A</em>来表示一个大整数<em>a</em>，<em>A</em>[0]表示<em>a</em>的个位，<em>A</em>[1]表示<em>a</em>的十位，依次类推。
　　将<em>a</em>乘以一个整数<em>k</em>变为将数组<em>A</em>的每一个元素都乘以<em>k</em>，请注意处理相应的进位。
　　首先将<em>a</em>设为1，然后乘2，乘3，当乘到<em>n</em>时，即得到了<em>n</em>!的值。</p></blockquote>

<!-- more -->


<blockquote><p>输入格式</p>

<p>　　输入包含一个正整数<em>n</em>，<em>n</em>&lt;=1000。</p>

<p>输出格式</p>

<p>　　输出<em>n</em>!的准确值。</p>

<p>样例输入</p>

<p>10</p>

<p>样例输出</p>

<p>3628800</p></blockquote>

<p>这道题是典型的大数问题，难度不高，这篇的重点也不在于题目本身，只是记录和反思一下在编程中遇到的一个小问题。</p>

<h3>本人源码：</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="n">using</span> <span class="n">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="o">*</span><span class="n">p</span><span class="o">=</span><span class="n">new</span> <span class="kt">int</span> <span class="p">[</span><span class="mi">1000000</span><span class="p">];</span>   <span class="c1">//6</span>
</span><span class='line'>    <span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">q</span><span class="o">=</span><span class="mi">0</span><span class="p">;;</span>        <span class="c1">//q 为最大的那一位</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">add</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;=</span><span class="n">q</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>            <span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">*=</span><span class="n">i</span><span class="p">;</span>
</span><span class='line'>            <span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">+=</span><span class="n">add</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">&gt;=</span><span class="mi">10</span><span class="p">){</span>
</span><span class='line'>                <span class="n">add</span><span class="o">=</span><span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">/</span><span class="mi">10</span><span class="p">;</span>
</span><span class='line'>                <span class="n">p</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">%=</span><span class="mi">10</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">else</span>
</span><span class='line'>                <span class="n">add</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">j</span><span class="o">==</span><span class="n">q</span><span class="o">&amp;&amp;</span><span class="n">add</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span>
</span><span class='line'>                <span class="k">while</span> <span class="p">(</span><span class="n">add</span><span class="p">){</span>
</span><span class='line'>                    <span class="n">p</span><span class="p">[</span><span class="o">++</span><span class="n">q</span><span class="p">]</span><span class="o">=</span><span class="n">add</span><span class="o">%</span><span class="mi">10</span><span class="p">;</span>
</span><span class='line'>                    <span class="n">add</span><span class="o">/=</span><span class="mi">10</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">add</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(;</span><span class="n">q</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="n">q</span><span class="o">--</span><span class="p">)</span>
</span><span class='line'>        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">p</span><span class="p">[</span><span class="n">q</span><span class="p">];</span>
</span><span class='line'>    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>程序流程很清晰，就是按题目的思路对每一位乘以n，然后对进位进行处理，由于我用了一个变量q来标注数的最高位，所以本程序中需要注意的一点就在于对最高位的进位的处理上，需要小小折腾一下。</p>

<p>网上其他博主的源码更为简洁，如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;  </span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;  </span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;  </span>
</span><span class='line'><span class="cp">#define MAX 4000  </span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">,</span><span class="n">a</span><span class="p">[</span><span class="n">MAX</span><span class="p">],</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">s</span><span class="p">,</span><span class="n">r</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>    <span class="n">memset</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="k">sizeof</span><span class="p">(</span><span class="n">a</span><span class="p">));</span>
</span><span class='line'>    <span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">MAX</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>            <span class="n">s</span><span class="o">=</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">*</span><span class="n">i</span><span class="o">+</span><span class="n">r</span><span class="p">;</span>
</span><span class='line'>            <span class="n">r</span><span class="o">=</span><span class="n">s</span><span class="o">/</span><span class="mi">10</span><span class="p">;</span><span class="c1">//进位  </span>
</span><span class='line'>            <span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">s</span><span class="o">%</span><span class="mi">10</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="n">MAX</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">--</span><span class="p">){</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="p">;</span><span class="n">j</span><span class="o">&gt;=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">--</span><span class="p">)</span><span class="c1">//倒序输出  </span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="n">a</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是c语言版的，思路也非常清晰简洁，甚至简单粗暴而有效，可多加参考。</p>

<p>在本次解题过程中产生了一个小问题：</p>

<p>源码<code>int *p=new int [1000000];</code> 即初始数组的声明的时候，一开始写成了这样<code>int *p=new int (1000000);</code>。犯下了大错，  new int (1000000) 根本不是对数组的声明，而是对int 变量的声明，括号中的内容是int变量的初始值。所以在程序运行过程中产生了运行错误。<strong>以后需要多加注意</strong></p>

<p>在debug的过程中，发现了一个需要关注的地方，即【】静态数组与new 的动态数组的区别，其实之前也有所了解，即静态数组是和普通变量一样存储在栈里的，而动态数组（通过new关键字申请的内存空间）都是在heap堆中。</p>

<p>这是一个比较深入的问题，虽然这题的bug不在此处，但是这也是一个需要关注的地方，待后期深入学习后再撰写一篇博文详细记录。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一道题引出的Unix-Fork函数解析]]></title>
    <link href="https://mrfant.github.io/blog/2017/11/24/Unix-Fork-function/"/>
    <updated>2017-11-24T17:19:52+08:00</updated>
    <id>https://mrfant.github.io/blog/2017/11/24/Unix-Fork-function</id>
    <content type="html"><![CDATA[<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="c1">//可产生20个进程，包括main进程</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">fork</span><span class="p">();</span>
</span><span class='line'>    <span class="n">fork</span><span class="p">()</span><span class="o">&amp;&amp;</span><span class="n">fork</span><span class="p">()</span><span class="o">||</span><span class="n">fork</span><span class="p">();</span>
</span><span class='line'>    <span class="n">fork</span><span class="p">();</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;+  </span><span class="se">\n\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[十六进制转八进制之大数问题的处理]]></title>
    <link href="https://mrfant.github.io/blog/2017/11/24/Hex2Oct/"/>
    <updated>2017-11-24T17:19:52+08:00</updated>
    <id>https://mrfant.github.io/blog/2017/11/24/Hex2Oct</id>
    <content type="html"><![CDATA[<blockquote><p><strong>问题描述</strong>
　　给定n个十六进制正整数，输出它们对应的八进制数。</p>

<p><strong>输入格式</strong>
　　输入的第一行为一个正整数n （1&lt;=n&lt;=10）。
　　接下来n行，每行一个由0~9、大写字母A~F组成的字符串，表示要转换的十六进制正整数，每个十六进制数长度不超过100000。</p>

<p><strong>输出格式</strong>
　　输出n行，每行为输入对应的八进制正整数。</p></blockquote>

<!-- more -->


<blockquote><p>　　<strong>【注意</strong>】
　　输入的十六进制数不会有前导0，比如012A。
　　输出的八进制数也不能有前导0。</p>

<p><strong>样例输入</strong>
　　2
　　39
　　123ABC</p>

<p><strong>样例输出</strong>
　　71
　　4435274</p>

<p>　　<strong>【提示</strong>】
　　先将十六进制数转换成某进制数，再由某进制数转换成八进制。</p></blockquote>

<p>这道题目的关键在于处理的数据位数，题目要求转换的十六进制数长度不超过十万位，十万位的十六进制数据是不可能由常规的数据类型来存储，只能存储为字符串类型。把输入存储为字符串类型后，就可以对其进行转换了，转换有以下几种思路：</p>

<p>一、将字符串中的每一位十六进制数转换为二进制数，再3位3位得将二进制数组合成八进制输出，这也是题目hints的思路，网上大多数都是以此为解。</p>

<p>二、第二个思路就是我自己所想的了，剑走偏锋，另辟蹊径。主要是：由于一位十六进制数的二进制为是四位，而八进制的二进制为是三位，所以3个十六进制数可以转换为4个八进制数。所以可以对输入的十六进制字符串3位3位得进行处理，转换为int类型的值，再在输出时利用规则漏洞<code>cout&lt;&lt;oct&lt;&lt;value;</code> 直接输出这3位十六进制数的八进制表示。这种方法算是一种“凑输出”的“作弊”手段吧，但是这毕竟是做题，而且算法结果确实能够提高效率，故不失为一种好方法。</p>

<h3>算法细节：</h3>

<p>前缀数的处理：</p>

<p>由于是对输入字符串的每3位进行处理，但是字符串位数不一定是3的倍数，所以需对字符串前面几个前缀数字进行特殊处理。</p>

<p>容易忽略的一点就是，在第二种方法中对字符串后面的每次三位处理的过程中由于是直接输出3位十六进制数的（先转换成int型）八进制表示，所以有可能出现漏输出0位的情况（如把0x1FF输出成“777”，正确的应该输出“0777”）为避免漏位，故需对该值进行分情况处理。我就是在这里摔了跤，忽略了细节。。。。</p>

<p>思路一源码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">k</span><span class="o">&lt;=</span><span class="n">n</span><span class="p">;</span><span class="n">k</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">string</span> <span class="n">s1</span><span class="p">,</span><span class="n">s2</span><span class="p">;</span><span class="c1">//s1为输入的原始的十六进制串，s2为转化成的二进制串</span>
</span><span class='line'>        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">s1</span><span class="p">;</span>
</span><span class='line'>        <span class="n">s2</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="p">;</span><span class="c1">//初始化</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">s1</span><span class="p">.</span><span class="n">length</span><span class="p">();</span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="c1">//遍历，字符串上加上每一位</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">switch</span><span class="p">(</span><span class="n">s1</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="k">case</span> <span class="sc">&#39;0&#39;</span><span class="o">:</span><span class="n">s2</span><span class="o">+=</span><span class="s">&quot;0000&quot;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="sc">&#39;1&#39;</span><span class="o">:</span><span class="n">s2</span><span class="o">+=</span><span class="s">&quot;0001&quot;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="sc">&#39;2&#39;</span><span class="o">:</span><span class="n">s2</span><span class="o">+=</span><span class="s">&quot;0010&quot;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="sc">&#39;3&#39;</span><span class="o">:</span><span class="n">s2</span><span class="o">+=</span><span class="s">&quot;0011&quot;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="sc">&#39;4&#39;</span><span class="o">:</span><span class="n">s2</span><span class="o">+=</span><span class="s">&quot;0100&quot;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="sc">&#39;5&#39;</span><span class="o">:</span><span class="n">s2</span><span class="o">+=</span><span class="s">&quot;0101&quot;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="sc">&#39;6&#39;</span><span class="o">:</span><span class="n">s2</span><span class="o">+=</span><span class="s">&quot;0110&quot;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="sc">&#39;7&#39;</span><span class="o">:</span><span class="n">s2</span><span class="o">+=</span><span class="s">&quot;0111&quot;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="sc">&#39;8&#39;</span><span class="o">:</span><span class="n">s2</span><span class="o">+=</span><span class="s">&quot;1000&quot;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="sc">&#39;9&#39;</span><span class="o">:</span><span class="n">s2</span><span class="o">+=</span><span class="s">&quot;1001&quot;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="sc">&#39;A&#39;</span><span class="o">:</span><span class="n">s2</span><span class="o">+=</span><span class="s">&quot;1010&quot;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="sc">&#39;B&#39;</span><span class="o">:</span><span class="n">s2</span><span class="o">+=</span><span class="s">&quot;1011&quot;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="sc">&#39;C&#39;</span><span class="o">:</span><span class="n">s2</span><span class="o">+=</span><span class="s">&quot;1100&quot;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="sc">&#39;D&#39;</span><span class="o">:</span><span class="n">s2</span><span class="o">+=</span><span class="s">&quot;1101&quot;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="sc">&#39;E&#39;</span><span class="o">:</span><span class="n">s2</span><span class="o">+=</span><span class="s">&quot;1110&quot;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">case</span> <span class="sc">&#39;F&#39;</span><span class="o">:</span><span class="n">s2</span><span class="o">+=</span><span class="s">&quot;1111&quot;</span><span class="p">;</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'>                <span class="k">default</span><span class="o">:</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">len</span><span class="o">=</span><span class="n">s2</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="n">len</span><span class="o">%</span><span class="mi">3</span><span class="o">==</span><span class="mi">1</span><span class="p">)</span><span class="c1">//三个二进制为一位八进制，二进制串前面补0，确保二进制串的长度为3的倍数</span>
</span><span class='line'>            <span class="n">s2</span><span class="o">=</span><span class="s">&quot;00&quot;</span><span class="o">+</span><span class="n">s2</span><span class="p">;</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">len</span><span class="o">%</span><span class="mi">3</span><span class="o">==</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>            <span class="n">s2</span><span class="o">=</span><span class="s">&quot;0&quot;</span><span class="o">+</span><span class="n">s2</span><span class="p">;</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">flag</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="c1">//对前缀数字的处理</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">s2</span><span class="p">.</span><span class="n">length</span><span class="p">();</span><span class="n">i</span><span class="o">+=</span><span class="mi">3</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">int</span> <span class="n">num</span><span class="o">=</span><span class="mi">4</span><span class="o">*</span><span class="p">(</span><span class="n">s2</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-</span><span class="sc">&#39;0&#39;</span><span class="p">)</span><span class="o">+</span><span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="n">s2</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="sc">&#39;0&#39;</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="n">s2</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">-</span><span class="sc">&#39;0&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">num</span><span class="p">)</span>
</span><span class='line'>                <span class="n">flag</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="c1">//忽略前导0</span>
</span><span class='line'>            <span class="k">if</span><span class="p">(</span><span class="n">flag</span><span class="p">)</span>
</span><span class='line'>                <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">num</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是网上一博主的源码，比较具有代表性。</p>

<p>思路二源码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="c1">//#include &lt;string&gt;</span>
</span><span class='line'><span class="n">using</span> <span class="n">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">str2int</span><span class="p">(</span><span class="kt">char</span> <span class="n">c</span><span class="p">){</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">c</span><span class="o">&gt;=</span><span class="sc">&#39;A&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">c</span><span class="o">-</span><span class="sc">&#39;A&#39;</span><span class="o">+</span><span class="mi">10</span><span class="p">;</span>   <span class="c1">//for A==10</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">return</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">c</span><span class="o">-</span><span class="sc">&#39;0&#39;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="c1">//int str2int(char c);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">n</span><span class="p">;</span>
</span><span class='line'>    <span class="n">string</span> <span class="n">str</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">strLength</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">prex</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">str</span><span class="p">;</span>
</span><span class='line'>        <span class="n">strLength</span><span class="o">=</span><span class="n">str</span><span class="p">.</span><span class="n">length</span><span class="p">();</span>
</span><span class='line'>        <span class="c1">//value=0;</span>
</span><span class='line'>        <span class="n">prex</span><span class="o">=</span><span class="n">strLength</span><span class="o">%</span><span class="mi">3</span><span class="p">;</span>
</span><span class='line'>        <span class="c1">//以下是对前面几个数字对特殊处理</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">prex</span><span class="o">==</span><span class="mi">2</span><span class="p">){</span>
</span><span class='line'>            <span class="n">value</span><span class="o">=</span><span class="n">str2int</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">*</span><span class="mi">16</span><span class="o">+</span><span class="n">str2int</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>            <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">oct</span><span class="o">&lt;&lt;</span><span class="n">value</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">prex</span><span class="o">==</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>            <span class="n">value</span><span class="o">=</span><span class="n">str2int</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>            <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">oct</span><span class="o">&lt;&lt;</span><span class="n">value</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="p">(;</span><span class="n">prex</span><span class="o">&lt;</span><span class="n">strLength</span><span class="p">;</span><span class="n">prex</span><span class="o">+=</span><span class="mi">3</span><span class="p">){</span>
</span><span class='line'>            <span class="c1">//每3位处理</span>
</span><span class='line'>            <span class="n">value</span><span class="o">=</span><span class="n">str2int</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">prex</span><span class="p">])</span><span class="o">*</span><span class="mi">16</span><span class="o">*</span><span class="mi">16</span><span class="o">+</span><span class="n">str2int</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">prex</span><span class="o">+</span><span class="mi">1</span><span class="p">])</span><span class="o">*</span><span class="mi">16</span><span class="o">+</span><span class="n">str2int</span><span class="p">(</span><span class="n">str</span><span class="p">[</span><span class="n">prex</span><span class="o">+</span><span class="mi">2</span><span class="p">]);</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">prex</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="c1">//补0以防止漏位</span>
</span><span class='line'>                <span class="c1">// 0777的十进制表示为512，0077为 63 ，0007为 7</span>
</span><span class='line'>                <span class="c1">// 故分别补0</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">value</span><span class="o">&lt;</span><span class="mi">512</span><span class="o">&amp;&amp;</span><span class="n">value</span><span class="o">&gt;</span><span class="mi">63</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">value</span> <span class="o">&lt;=</span><span class="mi">63</span><span class="o">&amp;&amp;</span><span class="n">value</span><span class="o">&gt;</span><span class="mi">7</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;00&quot;</span><span class="p">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">value</span><span class="o">&lt;=</span><span class="mi">7</span><span class="p">)</span>
</span><span class='line'>                    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;000&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">oct</span><span class="o">&lt;&lt;</span><span class="n">value</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>两种方法输入系统的结果如下，方法二为第一条。</p>

<p><img src="https://ws3.sinaimg.cn/large/006tKfTcgy1flt25pxwe7j30vc0680to.jpg" alt="对比" /></p>

<p>可见方法二在代码长度，cpu使用时间和内存使用上都比方法一优越。</p>

<p>但是这只是一个浅显的对比，两种算法都没有优化，在此仅提供一种思路，没有优劣之分。。。。。。。</p>

<h2>反思</h2>

<p>1、细节之处一定要多注意。</p>

<p>2、对蓝桥杯的输入输出的判罚机制有了更多了解，原来可以不用把输入全部输进去再输出结果，如本方法中的源码一般输入一条，输出一条也是可以的。</p>

<p>3、对本题方法一中的str.Length() 的 i为int型有点疑惑，因为之前总结出的蓝桥杯的编译系统为8位或16位，int类型应该存储不下十万这么大的数才对，但此处证明可以，有些疑惑，先挖个坑，到时候填。。。。。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[十六进制转十进制]]></title>
    <link href="https://mrfant.github.io/blog/2017/11/24/Hex2Dec/"/>
    <updated>2017-11-24T17:19:52+08:00</updated>
    <id>https://mrfant.github.io/blog/2017/11/24/Hex2Dec</id>
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1flt24b3b6vj30zu0d2dhu.jpg" alt="问题描述" /></p>

<blockquote><p>问题描述</p>

<p>从键盘输入一个不超过8位的正的十六进制数字符串，将它转换为正的十进制数后输出。
　　注：十六进制数中的10~15分别用大写的英文字母A、B、C、D、E、F表示。</p></blockquote>

<!-- more -->


<p><strong>code</strong>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="n">using</span> <span class="n">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">value</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">hex</span><span class="o">&gt;&gt;</span><span class="n">value</span><span class="p">;</span>
</span><span class='line'>  <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">dec</span><span class="o">&lt;&lt;</span><span class="n">value</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>题目本身不提，只是发现一个奇怪的情况：</p>

<p>测评程序测试一个四十亿的值时，显示出错。自然，在这种大数问题中我肯定考虑到了类型的范围的问题，所以，开始我使用的<code>value</code>变量是<code>Long</code>类型，然后惊奇地发现<code>Long</code>类型居然也无法容下这个四十亿的数，只有换成<code>unsigned Long</code>类型才能容纳。</p>

<p>一阵迷糊后才明白原来是因为蓝桥的测评环境与我本地的环境不同导致的。在不同位数的编译器环境中，int，long等类型占用的空间并不一样，c语言标准并没有严格规定，所以这可能会出现某些计算机中Long类型和其他计算机的int类型同样范围的情况。</p>

<p>这里先挖个坑，后面学习研究到的时候再来深入探讨。。。。。</p>
]]></content>
  </entry>
  
</feed>
