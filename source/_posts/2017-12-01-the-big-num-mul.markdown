---
layout: post
title:  "大数阶乘问题及内存分配的堆和栈区别"
date:   2017-11-24 17:19:52 +0800
categories: 算法
---

## 问题描述：

> 问题描述
>
> 　　输入一个正整数*n*，输出*n*!的值。
> 　　其中*n*!=1*2*3*…**n*。
>
> 算法描述
>
> 　　*n*!可能很大，而计算机能表示的整数范围有限，需要使用高精度计算的方法。使用一个数组*A*来表示一个大整数*a*，*A*[0]表示*a*的个位，*A*[1]表示*a*的十位，依次类推。
> 　　将*a*乘以一个整数*k*变为将数组*A*的每一个元素都乘以*k*，请注意处理相应的进位。
> 　　首先将*a*设为1，然后乘2，乘3，当乘到*n*时，即得到了*n*!的值。
<!-- more -->
>
> 输入格式
>
> 　　输入包含一个正整数*n*，*n*<=1000。
>
> 输出格式
>
> 　　输出*n*!的准确值。
>
> 样例输入
>
> 10
>
> 样例输出
>
> 3628800



这道题是典型的大数问题，难度不高，这篇的重点也不在于题目本身，只是记录和反思一下在编程中遇到的一个小问题。



### 本人源码：

```c
#include <iostream>
using namespace std;
int main(){
    int n;
    cin>>n;
    int *p=new int [1000000];	//6
    p[0]=1;
    int q=0;;		//q 为最大的那一位
    int add=0;
    for (int i=1;i<=n;i++){
        for (int j=0;j<=q;j++){
            p[j]*=i;
            p[j]+=add;
            if (p[j]>=10){
                add=p[j]/10;
                p[j]%=10;
            }
            else
                add=0;
            if (j==q&&add>0){
                while (add){
                    p[++q]=add%10;
                    add/=10;
                }
                break;
            }

        }
        add=0;
    }


    for (;q>=0;q--)
        cout<<p[q];
    cout<<endl;

    return 0;
}
```



程序流程很清晰，就是按题目的思路对每一位乘以n，然后对进位进行处理，由于我用了一个变量q来标注数的最高位，所以本程序中需要注意的一点就在于对最高位的进位的处理上，需要小小折腾一下。

网上其他博主的源码更为简洁，如下：



```c
#include <stdio.h>  
#include <stdlib.h>  
#include <string.h>  
#define MAX 4000  
int main() {  
    int n,a[MAX],i,j,s,r=0;  
    scanf("%d",&n);  
    memset(a,0,sizeof(a));  
    a[0]=1;  
    for(i=2;i<=n;i++){  
        for(j=0;j<MAX;j++){  
            s=a[j]*i+r;  
            r=s/10;//进位  
            a[j]=s%10;  
        }  
    }  
    for(i=MAX-1;i>=0;i--){  
        if(a[i])  
            break;  
    }  
    for(j=i;j>=0;j--)//倒序输出  
        printf("%d",a[j]);  
    return 0;  
}  
```





这是c语言版的，思路也非常清晰简洁，甚至简单粗暴而有效，可多加参考。





在本次解题过程中产生了一个小问题：

源码```int *p=new int [1000000];``` 即初始数组的声明的时候，一开始写成了这样```int *p=new int (1000000);```。犯下了大错， 	new int (1000000) 根本不是对数组的声明，而是对int 变量的声明，括号中的内容是int变量的初始值。所以在程序运行过程中产生了运行错误。**以后需要多加注意**



在debug的过程中，发现了一个需要关注的地方，即【】静态数组与new 的动态数组的区别，其实之前也有所了解，即静态数组是和普通变量一样存储在栈里的，而动态数组（通过new关键字申请的内存空间）都是在heap堆中。

这是一个比较深入的问题，虽然这题的bug不在此处，但是这也是一个需要关注的地方，待后期深入学习后再撰写一篇博文详细记录。
