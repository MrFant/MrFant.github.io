<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Jquery | YII Fant's Blog]]></title>
  <link href="https://mrfant.github.io/blog/categories/jquery/atom.xml" rel="self"/>
  <link href="https://mrfant.github.io/"/>
  <updated>2018-09-03T08:37:50+08:00</updated>
  <id>https://mrfant.github.io/</id>
  <author>
    <name><![CDATA[Yii]]></name>
    <email><![CDATA[yii.fant@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Js-jquery-get-htm5-dataattr[转载]]]></title>
    <link href="https://mrfant.github.io/blog/2018/09/02/js-jquery-get-htm5-dataattr/"/>
    <updated>2018-09-02T00:16:47+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/09/02/js-jquery-get-htm5-dataattr</id>
    <content type="html"><![CDATA[<p><a href="https://segmentfault.com/a/1190000005770912">原文链接</a></p>

<p>今天做项目的时候发现一个坑，关于jQuery获取data-*属性的方法data()，特写此篇来记录。</p>

<blockquote><p>HTML5规定可以为元素添加非标准型的属性，只需添加前缀data-，这些属性可以随意添加，随意命名，目的是为元素提供与渲染无关的信息，或提供语义信息。</p></blockquote>

<h2>js获取data-*的方式</h2>

<h3>通过dataset属性访问</h3>

<pre><code class="html">    &lt;div id="myDiv"data-appid="123" data-myname="lsxj"&gt;&lt;/div&gt;
</code></pre>

<pre><code class="js">var div = document.getElementById("myDiv");
var appId = div.dataset.appid;//获取data-appid的值
var myName = div.dataset.myname;//获取data-myname的值
//设置值
div.dataset.appid = 456;
div.dataset.myname = "newname";
</code></pre>

<!-- more -->


<p>最终HTML结果</p>

<pre><code class="html">    &lt;div id="myDiv" data-appid="456" data-myname="newname"&gt;&lt;/div&gt;
</code></pre>

<p>dataset属性的值是DOMStringMap的一个实例，名值对的映射。每个data-name形式的属性都有一个对应的属性，只不过该属性名没有data-前缀。</p>

<p>需要注意的是，dataset中大小写的问题。带连字符连接的名称在使用的时候需要命名驼峰化。例如data-my-name对应的是dataset.myName的值。可看以下代码</p>

<p>//将上面代码的设置值部分进行修改</p>

<pre><code class="js">div.dataset.appId = 789;
div.dataset.myName = "secondname";
</code></pre>

<p>最终结果:</p>

<pre><code class="html">    &lt;div id="myDiv" data-appid="123" data-myname="lsxj" data-app-id="456" data-my-name="secondname"&gt;&lt;/div&gt;
</code></pre>

<h3>传统获取方式 getAttribute</h3>

<p>还是上述的例子。获取data-*的方法可使用如下方法：</p>

<pre><code class="js">var appId = div.getAttribute("data-appid");
// jQuery获取方法
// data()方法
//获取属性
var appid = $("#myDiv").data("appid"); //123
var app_id = $("#myDiv").data("app-id"); //456
//属性赋值
$("#myDiv").data("appid","666");
//最终HTML代码
</code></pre>

<pre><code class="html">    &lt;div id="myDiv" data-appid="456" data-myname="newname"&gt;&lt;/div&gt;
</code></pre>

<blockquote><p>需要注意的是，data()的值进行修改并不会影响到DOM元素上的data-*属性的改变。data()的本质其实是将一个 “cache” 附加到了对象上，并使用了一个特殊的属性名称。
所以上述代码中，虽然对div进行了data()赋值操作，但HTML代码中div的data-appid的值仍然为123，因为data()只是修改了缓存的那个值，此时进行$(&lsquo;#myDiv&rsquo;).data(&ldquo;appid&rdquo;)的操作，输出的结果为666.</p></blockquote>

<h3>attr()方法</h3>

<pre><code class="js">var appid = $("#myDiv").attr("data-appid");
</code></pre>

<p>参考资料：</p>

<ul>
<li>jQuery官方文档</li>
<li>jQuery.data()和HTML5之data-属性</li>
<li>jQuery.data() 的实现方式</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jquery .ready() 与window.onload的区别]]></title>
    <link href="https://mrfant.github.io/blog/2018/09/01/jquery-ready-yu-window-dot-onloadde-qu-bie/"/>
    <updated>2018-09-01T23:15:26+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/09/01/jquery-ready-yu-window-dot-onloadde-qu-bie</id>
    <content type="html"><![CDATA[<h2>1.执行时间</h2>

<p>window.onload必须等到页面内包括<strong>图片</strong>的<strong>所有</strong>元素加载完毕后才能执行。
$(document).ready()是DOM结构绘制完毕后就执行，不必等到加载完毕。</p>

<h2>2.编写个数不同</h2>

<p>window.onload不能同时编写多个，如果有多个window.onload方法，只会执行一个
$(document).ready()可以同时编写多个，并且都可以得到执行</p>

<!-- more -->


<h2>3.简化写法</h2>

<pre><code>window.onload没有简化写法 

$(document).ready(function(){})
可以简写成:
$(function(){});
$(function(){});        //$()里面一个匿名函数
</code></pre>

<p>另外，需要注意一点，由于在 <code>$(document).ready()</code> 方法内注册的事件，只要 <strong>DOM 就绪</strong>就会被执行，因此可能此时元素的关联文件未下载完。例如与图片有关的 html 下载完毕，并且已经解析为 DOM 树了，但很有可能图片还没有加载完毕,所以例如<em>图片的高度和宽度</em>这样的属性此时不一定有效。
要解决这个问题，可以使用 Jquery 中另一个关于页面加载的方法 &mdash;<code>load()</code> 方法。 <code>load()</code> 方法会在元素的 onload 事件中绑定一个处理函数。如果处理函数绑定给 window 对象，则会在所有内容 ( 包括窗口、框架、对象和图像等 ) 加载完毕后触发，如果处理函数绑定在元素上，则会在元素的内容加载完毕后触发。</p>

<h3>代码如下：</h3>

<pre><code class="js">$(window).load(function (){ 
       // 编写代码  
});
//等价于 JavaScript 中的以下代码 
Window.onload = function (){ 
     // 编写代码 
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[深入理解JQuery中的on方法(事件委派机制)]]></title>
    <link href="https://mrfant.github.io/blog/2018/08/27/jQuery-on-methon/"/>
    <updated>2018-08-27T00:00:00+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/08/27/jQuery-on-methon</id>
    <content type="html"><![CDATA[<p>参考博客：<a href="https://segmentfault.com/a/1190000006652120">https://segmentfault.com/a/1190000006652120</a></p>

<h2>抛出问题：</h2>

<blockquote><p>jquery on()方法和click()等绑定事件监听函数的方法有什么区别?</p></blockquote>

<h2>demo：</h2>

<p>以下实例中原先的 HTML 元素点击其身后的 Delete 按钮就会被删除。而动态添加的 HTML 元素，使用 click() 这种写法，点击 Delete 按钮无法删除；使用 On() 方式可以。</p>

<p><a href="https://c.runoob.com/codedemo/5357">在线演示</a></p>

<pre><code class="js">$("#newclick").click(function(){ 
    $(".li").append('&lt;li&gt;动态添加的HTML元素click&lt;button class="deleteclick"&gt;Delete&lt;/button&gt;&lt;/li&gt;'); 
});
$("#newon").click(function(){ 
    $(".li").append('&lt;li&gt;动态添加的HTML元素on&lt;button class="deleteon"&gt;Delete&lt;/button&gt;&lt;/li&gt;'); 
});
$(".delete").click(function(){ 
    $(this).parent().remove(); 
}); 

$(".li").on('click', ".deleteon", function(){
    $(this).parent().remove(); 
})
$(".deleteclick").click(function(){ 
    $(this).parent().remove(); 
});
</code></pre>

<!-- more -->


<h2>结论：</h2>

<p>二者在绑定<strong>静态控件</strong>时没有区别，<em>但是</em>如果面对动态产生的控件，只有on()能成功的绑定到<strong>动态控件</strong>中。
{:.info}</p>

<h2>拓展</h2>

<p>许多项目在前后端交互时都采用ajax或pjax等技术动态添加新的控件。在这种情况下，就必须使用on（）方法来为新添加的元素绑定事件监听函数。
具体见参考博客</p>
]]></content>
  </entry>
  
</feed>
