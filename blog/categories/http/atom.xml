<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Http | YII Fant's Blog]]></title>
  <link href="https://mrfant.github.io/blog/categories/http/atom.xml" rel="self"/>
  <link href="https://mrfant.github.io/"/>
  <updated>2018-09-03T22:03:31+08:00</updated>
  <id>https://mrfant.github.io/</id>
  <author>
    <name><![CDATA[Yii]]></name>
    <email><![CDATA[yii.fant@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RequestDispatcher请求调度接口详解]]></title>
    <link href="https://mrfant.github.io/blog/2018/09/03/requestdispatcherqing-qiu-diao-du-jie-kou-xiang-jie/"/>
    <updated>2018-09-03T20:17:44+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/09/03/requestdispatcherqing-qiu-diao-du-jie-kou-xiang-jie</id>
    <content type="html"><![CDATA[<p>RequestDispatcher 接口,通常这个接口的译名是“请求转发接口”，但是这个译名不准确，也容易让人以为这个接口只能“转发”。</p>

<blockquote><p>其实RequestDispatcher接口具有<strong>请求转发</strong>（forward）和<strong>请求包含</strong>（include）两种方法，两种方法略有差异，所以我喜欢把这个接口称为请求调度，以区别它的接口方法。</p></blockquote>

<h3>请求转发（forward）</h3>

<p>先看实例：</p>

<pre><code class="java RequestForwardServlet.java">/**
 * RequestDispatcher 接口具有请求转发（forward）和请求包含（include）两种方法
 * 由于转发的是同一个request请求，所以可以在该请求中设置参数来传递数据
 * 当前代码使用forward转发请求，由转发后的ResultServlet显示结果可知，
 * 请求转发forward会改变uri，queryString根据getRequestDispatcher()函数的方法而变。
 * note：但是请求转发不会改变浏览器URL地址栏。
 */
package cn.itcast.chapter04.request;
import java.io.IOException;
import javax.servlet.*;
import javax.servlet.http.*;
public class RequestForwardServlet extends HttpServlet {
    public void doGet(HttpServletRequest request,HttpServletResponse response)  throws ServletException, IOException {
        response.setContentType("text/html;charset=utf-8");
        // 将数据存储到request对象中
        request.setAttribute("company", "北京传智播客教育有限公司");
        // 从request接口中获取请求调度类实例
        RequestDispatcher dispatcher = request.getRequestDispatcher("/ResultServlet?p1=123");
        dispatcher.forward(request, response);
    }

    public void doPost(HttpServletRequest request,HttpServletResponse response)throws ServletException, IOException {
            doGet(request, response);
    }
}
</code></pre>

<!-- more -->


<pre><code class="java ResultServlet.java">/**
 * output:
 URI:/ResultServlet
 QueryString:p1=123
 parameter p1:123
 公司名称：北京传智播客教育有限公司
 */
package cn.itcast.chapter04.request;
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
public class ResultServlet extends HttpServlet {
    public void doGet(HttpServletRequest request,
        HttpServletResponse response)throws ServletException, IOException {
        response.setContentType("text/html;charset=utf-8");
          // 获取PrintWriter对象用于输出信息
        PrintWriter out = response.getWriter();
        out.println("URI:" + request.getRequestURI() + "&lt;br&gt;");
        out.println("QueryString:" + request.getQueryString() + "&lt;br&gt;");
        out.println("parameter p1:" +
        request.getParameter("p1") + "&lt;br&gt;");
        // 获取request请求对象中保存的数据
        String company = (String) request.getAttribute("company");
        if (company != null) {
            out.println("公司名称：" + company + "&lt;br&gt;");
        }
    }
    public void doPost(HttpServletRequest request,HttpServletResponse response)throws ServletException, IOException {
            doGet(request, response);
        }
    }
</code></pre>

<h3>请求包含（include）</h3>

<pre><code class="java IncludingServlet.java">/**
 * 当前代码使用include请求包含，由转发后的IncludedServlet显示结果可知，
 * 请求包含不会改变uri，queryString,还是including类的值。
 * 还由于在本代码中注释掉了ContentType的设置，所以最后输出的是纯文本（非html）并且中文显示为乱码，
 * 即使在Included代码中设置了也没用，因为在那之前response对象已经生成。
 */
package cn.itcast.chapter04.request;
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
public class IncludingServlet extends HttpServlet {
    public void doGet(HttpServletRequest request, 
        HttpServletResponse response)throws ServletException, IOException {
//      response.setContentType("text/html;charset=utf-8");
        PrintWriter out = response.getWriter();
        RequestDispatcher rd = request
                    .getRequestDispatcher("/IncludedServlet?p1=abc");
            out.println("before including" + "&lt;br&gt;");
            rd.include(request, response);
            out.println("after including" + "&lt;br&gt;");
        }
        public void doPost(HttpServletRequest request,
            HttpServletResponse response)throws ServletException, IOException {
            doGet(request, response);
        }
    }
</code></pre>

<pre><code class="java IncludedServlet.java">/**
 * output:
 * before including&lt;br&gt;
 * ??&lt;br&gt;           &lt;---乱码
 * URI:/IncludingServlet&lt;br&gt;
 * QueryString:null&lt;br&gt;
 * parameter p1:abc&lt;br&gt;
 * after including&lt;br&gt;
 */
package cn.itcast.chapter04.request;
import java.io.*;
import javax.servlet.*;
import javax.servlet.http.*;
public class IncludedServlet extends HttpServlet {
    public void doGet(HttpServletRequest request, 
        HttpServletResponse response)throws ServletException, IOException {
        // 设置响应时使用的字符编码
        response.setContentType("text/html;charset=utf-8");
        response.setCharacterEncoding("utf-8");
        PrintWriter out = response.getWriter();
        // 在被包含的类中，request获取的那些参数都是原来主动包含类的值，但是parameter除外
        out.println("中国" + "&lt;br&gt;");
        out.println("URI:" + request.getRequestURI() + "&lt;br&gt;");
        out.println("QueryString:" + request.getQueryString() + "&lt;br&gt;");
        out.println("parameter p1:" + 
                       request.getParameter("p1") + "&lt;br&gt;");
    }
    public void doPost(HttpServletRequest request,
        HttpServletResponse response)throws ServletException, IOException {
        doGet(request, response);
    }
}
</code></pre>

<p>请求调度接口的实质是转发同一个请求给别的servlet处理，处理的是同一个请求，所以浏览器地址栏不会改变。</p>

<p>而重定向redirect接口是让浏览器重新发送一个请求，地址栏会发生改变。</p>

<blockquote><p>在Spring MVC里，请求重定向以redirect:开头，请求转发以forward:开头。</p></blockquote>
]]></content>
  </entry>
  
</feed>
