<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Reproduce | YII Fant's Blog]]></title>
  <link href="https://mrfant.github.io/blog/categories/reproduce/atom.xml" rel="self"/>
  <link href="https://mrfant.github.io/"/>
  <updated>2018-09-03T22:03:31+08:00</updated>
  <id>https://mrfant.github.io/</id>
  <author>
    <name><![CDATA[Yii]]></name>
    <email><![CDATA[yii.fant@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MYSQL外键(Foreign Key)的使用例子[转载]]]></title>
    <link href="https://mrfant.github.io/blog/2018/09/03/mysqlwai-jian-foreign-key-de-shi-yong-li-zi/"/>
    <updated>2018-09-03T21:57:23+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/09/03/mysqlwai-jian-foreign-key-de-shi-yong-li-zi</id>
    <content type="html"><![CDATA[<p>原文链接：<a href="http://www.cppblog.com/wolf/articles/69089.html">http://www.cppblog.com/wolf/articles/69089.html</a></p>

<p>在MySQL 3.23.44版本后，InnoDB引擎类型的表支持了外键约束。
外键的使用条件：
1.两个表必须是InnoDB表，MyISAM表暂时不支持外键（据说以后的版本有可能支持，但至少目前不支持）；
2.外键列必须建立了索引，MySQL 4.1.2以后的版本在建立外键时会自动创建索引，但如果在较早的版本则需要显示建立；
3.外键关系的两个表的列必须是数据类型相似，也就是可以相互转换类型的列，比如int和tinyint可以，而int和char则不可以；</p>

<p>外键的好处：可以使得两张表关联，保证数据的一致性和实现一些级联操作；</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Java8 Optional 的正确姿势[转载]]]></title>
    <link href="https://mrfant.github.io/blog/2018/09/03/proper-ways-of-using-java8-optional/"/>
    <updated>2018-09-03T21:52:00+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/09/03/proper-ways-of-using-java8-optional</id>
    <content type="html"><![CDATA[<p>原文链接：<a href="https://yanbin.blog/proper-ways-of-using-java8-optional/">https://yanbin.blog/proper-ways-of-using-java8-optional/</a></p>

<p><a href="http://www.importnew.com/22060.html">http://www.importnew.com/22060.html</a></p>

<!-- more -->


<p>使用 Java8 Optional 的正确姿势
2016/10/23 | 分类： 基础技术 | 1 条评论  | 标签： JAVA8, OPETIONAL
分享到：
原文出处： 隔叶黄莺 Unmi Blog
我们知道 Java 8 增加了一些很有用的 API, 其中一个就是 Optional. 如果对它不稍假探索, 只是轻描淡写的认为它可以优雅的解决 NullPointException 的问题, 于是代码就开始这么写了
Optional<User> user = ……
if (user.isPresent()) {
return user.getOrders();
} else {
return Collections.emptyList();
}
那么不得不说我们的思维仍然是在原地踏步, 只是本能的认为它不过是 User 实例的包装, 这与我们之前写成
User user = …..
if (user != null) {
return user.getOrders();
} else {
return Collections.emptyList();
}
实质上是没有任何分别. 这就是我们将要讲到的使用好 Java 8 Optional 类型的正确姿势.
在里约奥运之时, 新闻一再提起五星红旗有问题, 可是我怎么看都看不出来有什么问题, 后来才道是小星星膜拜中央的姿势不对. 因此我们千万也别对自己习以为常的事情觉得理所当然, 丝毫不会觉得有何不妥, 换句话说也就是当我们切换到 Java 8 的 Optional 时, 不能继承性的对待过往 null 时的那种思维, 应该掌握好新的, 正确的使用 Java 8 Optional 的正确姿势.
直白的讲, 当我们还在以如下几种方式使用 Optional 时, 就得开始检视自己了
1. 调用 isPresent() 方法时
2. 调用 get() 方法时
3. Optional 类型作为类/实例属性时
4. Optional 类型作为方法参数时
isPresent() 与 obj != null 无任何分别, 我们的生活依然在步步惊心. 而没有 isPresent() 作铺垫的 get() 调用在 IntelliJ IDEA 中会收到告警
Reports calls to java.util.Optional.get() without first checking with a isPresent() call if a value is available. If the Optional does not contain a value, get() will throw an exception. (调用 Optional.get() 前不事先用 isPresent() 检查值是否可用. 假如 Optional 不包含一个值, get() 将会抛出一个异常)
把 Optional 类型用作属性或是方法参数在 IntelliJ IDEA 中更是强力不推荐的
Reports any uses of java.util.Optional<T>, java.util.OptionalDouble, java.util.OptionalInt, java.util.OptionalLong or com.google.common.base.Optional as the type for a field or a parameter. Optional was designed to provide a limited mechanism for library method return types where there needed to be a clear way to represent “no result”. Using a field with type java.util.Optional is also problematic if the class needs to be Serializable, which java.util.Optional is not. (使用任何像 Optional 的类型作为字段或方法参数都是不可取的. Optional 只设计为类库方法的, 可明确表示可能无值情况下的返回类型. Optional 类型不可被序列化, 用作字段类型会出问题的)
所以 Optional 中我们真正可依赖的应该是除了 isPresent() 和 get() 的其他方法:
1. public<U> Optional<U> map(Function&lt;? super T, ? extends U> mapper)
2. public T orElse(T other)
3. public T orElseGet(Supplier&lt;? extends T> other)
4. public void ifPresent(Consumer&lt;? super T> consumer)
5. public Optional<T> filter(Predicate&lt;? super T> predicate)
6. public<U> Optional<U> flatMap(Function&lt;? super T, Optional<U>> mapper)
7. public <X extends Throwable> T orElseThrow(Supplier&lt;? extends X> exceptionSupplier) throws X
我略有自信的按照它们大概使用频度对上面的方法排了一下序.
先又不得不提一下 Optional 的三种构造方式: Optional.of(obj),  Optional.ofNullable(obj) 和明确的 Optional.empty()
Optional.of(obj): 它要求传入的 obj 不能是 null 值的, 否则还没开始进入角色就倒在了 NullPointerException 异常上了.
Optional.ofNullable(obj): 它以一种智能的, 宽容的方式来构造一个 Optional 实例. 来者不拒, 传 null 进到就得到 Optional.empty(), 非 null 就调用 Optional.of(obj).
那是不是我们只要用 Optional.ofNullable(obj) 一劳永逸, 以不变应二变的方式来构造 Optional 实例就行了呢? 那也未必, 否则 Optional.of(obj) 何必如此暴露呢, 私有则可?
我本人的观点是:  1. 当我们非常非常的明确将要传给 Optional.of(obj) 的 obj 参数不可能为 null 时, 比如它是一个刚 new 出来的对象(Optional.of(new User(&hellip;))), 或者是一个非 null 常量时;  2. 当想为 obj 断言不为 null 时, 即我们想在万一 obj 为 null 立即报告 NullPointException 异常, 立即修改, 而不是隐藏空指针异常时, 我们就应该果断的用 Optional.of(obj) 来构造 Optional 实例, 而不让任何不可预计的 null 值有可乘之机隐身于 Optional 中.
现在才开始怎么去使用一个已有的 Optional 实例, 假定我们有一个实例 Optional<User> user, 下面是几个普遍的, 应避免 if(user.isPresent()) { &hellip; } else { &hellip; } 几中应用方式.
存在即返回, 无则提供默认值</p>

<p>1
2
return user.orElse(null);  //而不是 return user.isPresent() ? user.get() : null;
return user.orElse(UNKNOWN_USER);</p>

<p>存在即返回, 无则由函数来产生</p>

<p>1
return user.orElseGet(() -> fetchAUserFromDatabase()); //而不要 return user.isPresent() ? user: fetchAUserFromDatabase();</p>

<p>存在才对它做点什么</p>

<p>1
2
3
4
5
6
user.ifPresent(System.out::println);</p>

<p>//而不要下边那样
if (user.isPresent()) {
  System.out.println(user.get());
}</p>

<p>map 函数隆重登场</p>

<p>当 user.isPresent() 为真, 获得它关联的 orders, 为假则返回一个空集合时, 我们用上面的 orElse, orElseGet 方法都乏力时, 那原本就是 map 函数的责任, 我们可以这样一行</p>

<p>1
2
3
4
5
6
7
8
return user.map(u -> u.getOrders()).orElse(Collections.emptyList())</p>

<p>//上面避免了我们类似 Java 8 之前的做法
if(user.isPresent()) {
  return user.get().getOrders();
} else {
  return Collections.emptyList();
}</p>

<p>map  是可能无限级联的, 比如再深一层, 获得用户名的大写形式</p>

<p>1
2
3
return user.map(u -> u.getUsername())
           .map(name -> name.toUpperCase())
           .orElse(null);</p>

<p>这要搁在以前, 每一级调用的展开都需要放一个 null 值的判断</p>

<p>1
2
3
4
5
6
7
8
9
10
11
User user = &hellip;..
if(user != null) {
  String name = user.getUsername();
  if(name != null) {
    return name.toUpperCase();
  } else {
    return null;
  }
} else {
  return null;
}</p>

<p>针对这方面 Groovy 提供了一种安全的属性/方法访问操作符 ?.</p>

<p>1
user?.getUsername()?.toUpperCase();</p>

<p>Swift 也有类似的语法, 只作用在  Optional 的类型上.
用了 isPresent() 处理 NullPointerException 不叫优雅, 有了  orElse, orElseGet 等, 特别是 map 方法才叫优雅.
其他几个, filter() 把不符合条件的值变为 empty(),  flatMap() 总是与 map() 方法成对的,  orElseThrow() 在有值时直接返回, 无值时抛出想要的异常.
一句话小结: 使用 Optional 时尽量不直接调用 Optional.get() 方法, Optional.isPresent() 更应该被视为一个私有方法, 应依赖于其他像 Optional.orElse(), Optional.orElseGet(), Optional.map() 等这样的方法.
最后, 最好的理解 Java 8 Optional 的方法莫过于看它的源代码 java.util.Optional, 阅读了源代码才能真真正正的让你解释起来最有底气, Optional 的方法中基本都是内部调用  isPresent() 判断, 真时处理值, 假时什么也不做.
参考链接:
1. Java 8 Optional: How to Use it
2. Tired of Null Pointer Exceptions? Consider Using Java SE 8′s Optional!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Security4实现方法级别安全控制[转载]]]></title>
    <link href="https://mrfant.github.io/blog/2018/09/03/spring-security4shi-xian-fang-fa-ji-bie-an-quan-kong-zhi/"/>
    <updated>2018-09-03T16:54:42+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/09/03/spring-security4shi-xian-fang-fa-ji-bie-an-quan-kong-zhi</id>
    <content type="html"><![CDATA[<p>原文地址： <a href="http://websystique.com/spring-security/spring-security-4-method-security-using-preauthorize-postauthorize-secured-el/">http://websystique.com/spring-security/spring-security-4-method-security-using-preauthorize-postauthorize-secured-el/</a></p>

<p>译文地址： <a href="https://blog.csdn.net/w605283073/article/details/51327182">https://blog.csdn.net/w605283073/article/details/51327182</a></p>

<p><code>@Secured</code> 注解不能指定AND这个条件，比如指定某个方法只能被拥有ADMIN和DBA身份的用户调用。
但是用<code>@PreAuthorize/@PostAuthorize</code>注解可以实现，这两个注解支持<strong>Spring EL</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Function-and-exclamation-mark[转载]]]></title>
    <link href="https://mrfant.github.io/blog/2018/09/01/function-and-exclamation-mark/"/>
    <updated>2018-09-01T23:52:32+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/09/01/function-and-exclamation-mark</id>
    <content type="html"><![CDATA[<p>博客转载至：</p>

<p><a href="https://swordair.com/function-and-exclamation-mark/">原文链接</a></p>

<blockquote><p>匿名函数的声明和执行要区分开</p></blockquote>

<p>问题：如果在function之前加上感叹号 (!) 会怎么样？比如下面的代码：</p>

<pre><code class="js">!function(){alert('iifksp')}()        // true
</code></pre>

<p>在控制台运行后得到的值时true，为什么是true这很容易理解，因为这个匿名函数没有返回值，默认返回的就是undefined，求反的结果很自然的就是true。所以问题并不在于结果值，而是在于，</p>

<blockquote><p><strong>为什么求反操作能够让一个匿名函数的自调变的合法？</strong></p></blockquote>

<!-- more -->


<p>平时我们可能对添加括号来调用匿名函数的方式更为习惯：</p>

<pre><code class="js">(function(){alert('iifksp')})()        // undefined
//或者：
(function(){alert('iifksp')}())        // undefined
</code></pre>

<p>虽然上述两者括号的位置不同，不过效果完全一样。
那么，
<strong>是什么好处使得为数不少的人对这种叹号的方式情有独钟？</strong>
如果只是为了节约一个字符未免太没有必要了，这样算来即使一个100K的库恐怕也节省不了多少空间。既然不是空间，那么就是说也许还有时间上的考量，事实很难说清，文章的最后有提到<strong>性能</strong>。
回到核心问题，为什么能这么做？甚至更为核心的问题是，为什么必须这么做？</p>

<blockquote><p>其实无论是括号，还是感叹号，让整个语句合法做的事情只有一件，就是让一个函数声明语句变成了一个表达式。</p></blockquote>

<pre><code class="js">function a(){alert('iifksp')}        // undefined

//这是一个函数声明，如果在这么一个声明后直接加上括号调用，解析器自然不会理解而报错：
function a(){alert('iifksp')}()        // SyntaxError: unexpected_token
</code></pre>

<p>因为这样的代码<strong>混淆了函数声明和函数调用</strong>，以这种方式声明的函数 a，就应该以 a(); 的方式调用。</p>

<p>但是括号则不同，<strong>它将一个函数声明转化成了一个表达式</strong>，解析器不再以函数声明的方式处理函数a，而是作为一个函数表达式处理，也因此只有在程序执行到函数a时它才能被访问。</p>

<blockquote><p>所以，任何消除函数声明和函数表达式间歧义的方法，都可以被解析器正确识别。</p></blockquote>

<p>比如：
<code>js
var i = function(){return 10}(); //赋值        // undefined
1 &amp;&amp; function(){return true}();        // true
1, function(){alert('iifksp')}();        // undefined
// 赋值，逻辑，甚至是逗号，各种操作符都可以告诉解析器，
// 这个不是函数声明，它是个函数表达式。
// 并且，对函数一元运算可以算的上是消除歧义最快的方式，
// 感叹号只是其中之一，如果不在乎返回值，这些一元运算都是有效的：
!function(){alert('iifksp')}()        // true
+function(){alert('iifksp')}()        // NaN
-function(){alert('iifksp')}()        // NaN
~function(){alert('iifksp')}()        // -1
// 甚至下面这些关键字，都能很好的工作：
void function(){alert('iifksp')}()        // undefined
new function(){alert('iifksp')}()        // Object
delete function(){alert('iifksp')}()        // true
// 最后，括号做的事情也是一样的，消除歧义才是它真正的工作，
// 而不是把函数作为一个整体，所以无论括号括在声明上还是把整个函数都括在里面，都是合法的：
(function(){alert('iifksp')})()        // undefined
(function(){alert('iifksp')}())        // undefined
</code>
说了这么多，实则在说的一些都是最为基础的概念——语句，表达式，表达式语句，这些概念如同指针与指针变量一样容易产生混淆。虽然这种混淆对编程无表征影响，但却是一块绊脚石随时可能因为它而头破血流。</p>

<hr />

<p>最后讨论下性能。我在jsperf上简单建立了一个测试：<a href="http://jsperf.com/js-funcion-expression-speed">http://jsperf.com/js-funcion-expression-speed</a> ，可以用不同浏览器访问，运行测试查看结果。我也同时将结果罗列如下表所示（由于我比较穷，测试配置有点丢人不过那也没办法：奔腾双核1.4G，2G内存，win7企业版）：
<code>
Option  Code    Ops/sec
Chrome 13   Firefox 6   IE9 Safari 5
!   !function(){;}()    3,773,196   10,975,198  572,694 2,810,197
+   +function(){;}()    21,553,847  12,135,960  572,694 1,812,238
-   -function(){;}()    21,553,847  12,135,960  572,694 1,864,155
~   ~function(){;}()    3,551,136   3,651,652   572,694 1,876,002
(1) (function(){;})()   3,914,953   12,135,960  572,694 3,025,608
(2) (function(){;}())   4,075,201   12,135,960  572,694 3,025,608
void    void function(){;}()    4,030,756   12,135,960  572,694 3,025,608
new new function(){;}() 619,606 299,100 407,104 816,903
delete  delete function(){;}()  4,816,225   12,135,960  572,694 2,693,524
=   var i = function(){;}() 4,984,774   12,135,960  565,982 2,602,630
&amp;&amp;  1 &amp;&amp; function(){;}()    5,307,200   4,393,486   572,694 2,565,645
||  0 || function(){;}()    5,000,000   4,406,035   572,694 2,490,128
&amp;   1 &amp; function(){;}() 4,918,209   12,135,960  572,694 1,705,551
|   1 | function(){;}() 4,859,802   12,135,960  572,694 1,612,372
^   1 ^ function(){;}() 4,654,916   12,135,960  572,694 1,579,778
,   1, function(){;}()  4,878,193   12,135,960  572,694 2,281,186
</code></p>

<p>可见不同的方式产生的结果并不相同，而且，差别很大，因浏览器而异。
但我们还是可以从中找出很多共性：</p>

<p>new方法永远最慢——这也是理所当然的。</p>

<p>其它方面很多差距其实不大，但有一点可以肯定的是，感叹号并非最为理想的选择。反观传统的括号，在测试里表现始终很快，在大多数情况下比感叹号更快——所以平时我们常用的方式毫无问题，甚至可以说是最优的。加减号在chrome表现惊人，而且在其他浏览器下也普遍很快，相比感叹号效果更好。</p>

<p>当然这只是个简单测试，不能说明问题。但有些结论是有意义的：</p>

<blockquote><p><strong>括号和加减号最优。</strong></p></blockquote>

<p>但是为什么这么多开发者钟情于感叹号？我觉得这只是一个习惯问题，它们之间的优劣完全可以忽略。一旦习惯了一种代码风格，那么这种约定会使得程序从混乱变得可读。如果习惯了感叹号，我不得不承认，它比括号有更好的可读性。我不用在阅读时留意括号的匹配，也不用在编写时粗心遗忘——</p>

<p>当我也这么干然后嚷嚷着这居然又节省了一个字符而沾沾自喜的时候，却忘了自己仓皇翻出一本卷边的C语言教科书的窘迫和荒唐&hellip;&hellip;任何人都有忘记的时候，当再捡起来的时候，捡起的就已经不单单是忘掉的东西了。
2011-10-31更新：如果你使用aptana，那么在使用（!+-）时要注意一点，它们会让aptana的解析失效，导致Outline窗口没有任何显示。但是就代码本身而言，其运行没有任何问题。</p>
]]></content>
  </entry>
  
</feed>
