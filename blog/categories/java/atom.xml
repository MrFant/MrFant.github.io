<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | YII Fant's Blog]]></title>
  <link href="https://mrfant.github.io/blog/categories/java/atom.xml" rel="self"/>
  <link href="https://mrfant.github.io/"/>
  <updated>2018-09-03T22:03:31+08:00</updated>
  <id>https://mrfant.github.io/</id>
  <author>
    <name><![CDATA[Yii]]></name>
    <email><![CDATA[yii.fant@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MYSQL外键(Foreign Key)的使用例子[转载]]]></title>
    <link href="https://mrfant.github.io/blog/2018/09/03/mysqlwai-jian-foreign-key-de-shi-yong-li-zi/"/>
    <updated>2018-09-03T21:57:23+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/09/03/mysqlwai-jian-foreign-key-de-shi-yong-li-zi</id>
    <content type="html"><![CDATA[<p>原文链接：<a href="http://www.cppblog.com/wolf/articles/69089.html">http://www.cppblog.com/wolf/articles/69089.html</a></p>

<p>在MySQL 3.23.44版本后，InnoDB引擎类型的表支持了外键约束。
外键的使用条件：
1.两个表必须是InnoDB表，MyISAM表暂时不支持外键（据说以后的版本有可能支持，但至少目前不支持）；
2.外键列必须建立了索引，MySQL 4.1.2以后的版本在建立外键时会自动创建索引，但如果在较早的版本则需要显示建立；
3.外键关系的两个表的列必须是数据类型相似，也就是可以相互转换类型的列，比如int和tinyint可以，而int和char则不可以；</p>

<p>外键的好处：可以使得两张表关联，保证数据的一致性和实现一些级联操作；</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Java8 Optional 的正确姿势[转载]]]></title>
    <link href="https://mrfant.github.io/blog/2018/09/03/proper-ways-of-using-java8-optional/"/>
    <updated>2018-09-03T21:52:00+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/09/03/proper-ways-of-using-java8-optional</id>
    <content type="html"><![CDATA[<p>原文链接：<a href="https://yanbin.blog/proper-ways-of-using-java8-optional/">https://yanbin.blog/proper-ways-of-using-java8-optional/</a></p>

<p><a href="http://www.importnew.com/22060.html">http://www.importnew.com/22060.html</a></p>

<!-- more -->


<p>使用 Java8 Optional 的正确姿势
2016/10/23 | 分类： 基础技术 | 1 条评论  | 标签： JAVA8, OPETIONAL
分享到：
原文出处： 隔叶黄莺 Unmi Blog
我们知道 Java 8 增加了一些很有用的 API, 其中一个就是 Optional. 如果对它不稍假探索, 只是轻描淡写的认为它可以优雅的解决 NullPointException 的问题, 于是代码就开始这么写了
Optional<User> user = ……
if (user.isPresent()) {
return user.getOrders();
} else {
return Collections.emptyList();
}
那么不得不说我们的思维仍然是在原地踏步, 只是本能的认为它不过是 User 实例的包装, 这与我们之前写成
User user = …..
if (user != null) {
return user.getOrders();
} else {
return Collections.emptyList();
}
实质上是没有任何分别. 这就是我们将要讲到的使用好 Java 8 Optional 类型的正确姿势.
在里约奥运之时, 新闻一再提起五星红旗有问题, 可是我怎么看都看不出来有什么问题, 后来才道是小星星膜拜中央的姿势不对. 因此我们千万也别对自己习以为常的事情觉得理所当然, 丝毫不会觉得有何不妥, 换句话说也就是当我们切换到 Java 8 的 Optional 时, 不能继承性的对待过往 null 时的那种思维, 应该掌握好新的, 正确的使用 Java 8 Optional 的正确姿势.
直白的讲, 当我们还在以如下几种方式使用 Optional 时, 就得开始检视自己了
1. 调用 isPresent() 方法时
2. 调用 get() 方法时
3. Optional 类型作为类/实例属性时
4. Optional 类型作为方法参数时
isPresent() 与 obj != null 无任何分别, 我们的生活依然在步步惊心. 而没有 isPresent() 作铺垫的 get() 调用在 IntelliJ IDEA 中会收到告警
Reports calls to java.util.Optional.get() without first checking with a isPresent() call if a value is available. If the Optional does not contain a value, get() will throw an exception. (调用 Optional.get() 前不事先用 isPresent() 检查值是否可用. 假如 Optional 不包含一个值, get() 将会抛出一个异常)
把 Optional 类型用作属性或是方法参数在 IntelliJ IDEA 中更是强力不推荐的
Reports any uses of java.util.Optional<T>, java.util.OptionalDouble, java.util.OptionalInt, java.util.OptionalLong or com.google.common.base.Optional as the type for a field or a parameter. Optional was designed to provide a limited mechanism for library method return types where there needed to be a clear way to represent “no result”. Using a field with type java.util.Optional is also problematic if the class needs to be Serializable, which java.util.Optional is not. (使用任何像 Optional 的类型作为字段或方法参数都是不可取的. Optional 只设计为类库方法的, 可明确表示可能无值情况下的返回类型. Optional 类型不可被序列化, 用作字段类型会出问题的)
所以 Optional 中我们真正可依赖的应该是除了 isPresent() 和 get() 的其他方法:
1. public<U> Optional<U> map(Function&lt;? super T, ? extends U> mapper)
2. public T orElse(T other)
3. public T orElseGet(Supplier&lt;? extends T> other)
4. public void ifPresent(Consumer&lt;? super T> consumer)
5. public Optional<T> filter(Predicate&lt;? super T> predicate)
6. public<U> Optional<U> flatMap(Function&lt;? super T, Optional<U>> mapper)
7. public <X extends Throwable> T orElseThrow(Supplier&lt;? extends X> exceptionSupplier) throws X
我略有自信的按照它们大概使用频度对上面的方法排了一下序.
先又不得不提一下 Optional 的三种构造方式: Optional.of(obj),  Optional.ofNullable(obj) 和明确的 Optional.empty()
Optional.of(obj): 它要求传入的 obj 不能是 null 值的, 否则还没开始进入角色就倒在了 NullPointerException 异常上了.
Optional.ofNullable(obj): 它以一种智能的, 宽容的方式来构造一个 Optional 实例. 来者不拒, 传 null 进到就得到 Optional.empty(), 非 null 就调用 Optional.of(obj).
那是不是我们只要用 Optional.ofNullable(obj) 一劳永逸, 以不变应二变的方式来构造 Optional 实例就行了呢? 那也未必, 否则 Optional.of(obj) 何必如此暴露呢, 私有则可?
我本人的观点是:  1. 当我们非常非常的明确将要传给 Optional.of(obj) 的 obj 参数不可能为 null 时, 比如它是一个刚 new 出来的对象(Optional.of(new User(&hellip;))), 或者是一个非 null 常量时;  2. 当想为 obj 断言不为 null 时, 即我们想在万一 obj 为 null 立即报告 NullPointException 异常, 立即修改, 而不是隐藏空指针异常时, 我们就应该果断的用 Optional.of(obj) 来构造 Optional 实例, 而不让任何不可预计的 null 值有可乘之机隐身于 Optional 中.
现在才开始怎么去使用一个已有的 Optional 实例, 假定我们有一个实例 Optional<User> user, 下面是几个普遍的, 应避免 if(user.isPresent()) { &hellip; } else { &hellip; } 几中应用方式.
存在即返回, 无则提供默认值</p>

<p>1
2
return user.orElse(null);  //而不是 return user.isPresent() ? user.get() : null;
return user.orElse(UNKNOWN_USER);</p>

<p>存在即返回, 无则由函数来产生</p>

<p>1
return user.orElseGet(() -> fetchAUserFromDatabase()); //而不要 return user.isPresent() ? user: fetchAUserFromDatabase();</p>

<p>存在才对它做点什么</p>

<p>1
2
3
4
5
6
user.ifPresent(System.out::println);</p>

<p>//而不要下边那样
if (user.isPresent()) {
  System.out.println(user.get());
}</p>

<p>map 函数隆重登场</p>

<p>当 user.isPresent() 为真, 获得它关联的 orders, 为假则返回一个空集合时, 我们用上面的 orElse, orElseGet 方法都乏力时, 那原本就是 map 函数的责任, 我们可以这样一行</p>

<p>1
2
3
4
5
6
7
8
return user.map(u -> u.getOrders()).orElse(Collections.emptyList())</p>

<p>//上面避免了我们类似 Java 8 之前的做法
if(user.isPresent()) {
  return user.get().getOrders();
} else {
  return Collections.emptyList();
}</p>

<p>map  是可能无限级联的, 比如再深一层, 获得用户名的大写形式</p>

<p>1
2
3
return user.map(u -> u.getUsername())
           .map(name -> name.toUpperCase())
           .orElse(null);</p>

<p>这要搁在以前, 每一级调用的展开都需要放一个 null 值的判断</p>

<p>1
2
3
4
5
6
7
8
9
10
11
User user = &hellip;..
if(user != null) {
  String name = user.getUsername();
  if(name != null) {
    return name.toUpperCase();
  } else {
    return null;
  }
} else {
  return null;
}</p>

<p>针对这方面 Groovy 提供了一种安全的属性/方法访问操作符 ?.</p>

<p>1
user?.getUsername()?.toUpperCase();</p>

<p>Swift 也有类似的语法, 只作用在  Optional 的类型上.
用了 isPresent() 处理 NullPointerException 不叫优雅, 有了  orElse, orElseGet 等, 特别是 map 方法才叫优雅.
其他几个, filter() 把不符合条件的值变为 empty(),  flatMap() 总是与 map() 方法成对的,  orElseThrow() 在有值时直接返回, 无值时抛出想要的异常.
一句话小结: 使用 Optional 时尽量不直接调用 Optional.get() 方法, Optional.isPresent() 更应该被视为一个私有方法, 应依赖于其他像 Optional.orElse(), Optional.orElseGet(), Optional.map() 等这样的方法.
最后, 最好的理解 Java 8 Optional 的方法莫过于看它的源代码 java.util.Optional, 阅读了源代码才能真真正正的让你解释起来最有底气, Optional 的方法中基本都是内部调用  isPresent() 判断, 真时处理值, 假时什么也不做.
参考链接:
1. Java 8 Optional: How to Use it
2. Tired of Null Pointer Exceptions? Consider Using Java SE 8′s Optional!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring JPA的@GeneratedValue注解]]></title>
    <link href="https://mrfant.github.io/blog/2018/09/03/spring-jpade-at-generatedvaluezhu-jie/"/>
    <updated>2018-09-03T21:45:15+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/09/03/spring-jpade-at-generatedvaluezhu-jie</id>
    <content type="html"><![CDATA[<p>JPA的@GeneratedValue注解,在JPA中,@GeneratedValue注解存在的意义主要就是为一个实体生成一个唯一标识的主键(JPA要求每一个实体Entity,必须有且只有一个主键)。</p>

<p>@GeneratedValue提供了主键的生成策略。@GeneratedValue注解有两个属性,分别是strategy和generator,其中generator属性的值是一个字符串,默认为"&ldquo;,其声明了主键生成器的名称(对应于同名的主键生成器@SequenceGenerator和@TableGenerator)。</p>

<p>JPA为开发人员提供了四种主键生成策略,其被定义在枚举类GenerationType中,包括GenerationType.TABLE,GenerationType.SEQUENCE,GenerationType.IDENTITY和GenerationType.AUTO。</p>

<p>四种生成策略详解：<a href="https://blog.csdn.net/u012493207/article/details/50846616">https://blog.csdn.net/u012493207/article/details/50846616</a></p>

<p>如果使用mysql数据库，如果没有设置生成策略为identity，会默认使用auto会设置为sequence,即，jpa会自动生成一个hibernate_sequence表。</p>

<pre><code>note：也可以不用@GeneratedValue注解，在这种情况下，id需要自己手动设置，这种情况下可以在jpa中来用save方法更新表。
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于jpa实体关系映射Cascade权限的相关笔记]]></title>
    <link href="https://mrfant.github.io/blog/2018/09/03/guan-yu-jpashi-ti-guan-xi-ying-she-cascadequan-xian-de-xiang-guan-bi-ji/"/>
    <updated>2018-09-03T21:35:01+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/09/03/guan-yu-jpashi-ti-guan-xi-ying-she-cascadequan-xian-de-xiang-guan-bi-ji</id>
    <content type="html"><![CDATA[<p>本篇博文是博主在项目中总结的结论经验，若要加深理解，还需到具体实例中参照实例来解读。</p>

<p>1、在@ManyToMany，@OneToMany,@ManyToOne三个注解中，会在其中的MTM和MTO两个之间注解关系维护方，MTO不能注解为关系被维护方，</p>

<pre><code>也就是说MTO注解没有mappedBy属性。
</code></pre>

<p>目前来看，多对一和一对多的关系中，只能把“多”的那一方指定为关系维护方。</p>

<p>换句话说也就是MTO注解的就是关系维护方，OTM注解的就是被维护方，需要加上mappedBy注解。</p>

<p>2、在关系维护方中，一般情况下要把Cascade类型设置为All，这样才能拥有对被维护方的创建（persistent）、脱离（detach）和删除（remove）的权限。</p>

<p>而在对被维护方操作的过程中发现，如果没有给被维护方创建（persistent）的Cascade，被维护方几乎毫无作为。</p>

<p>在给了创建权限之后，创建被维护方表的同时也会创建维护方表，但是，这并没有创建关系约束（在MTM中表现为中间表没有创建双方的约束，在MTO（OTM）中表现为维护方表的外键值为null）。</p>

<p>其实，关系被维护方也可以对关联关系进行维护，在有权限的情况下也可以对维护方表进行创建，更新，删除等操作。</p>

<p>有博主的文章说到：</p>

<blockquote><p>被维护方不会主动去维护关联关系。
真正的关系维护，掌握在维护方的手中。
维护方对象不能为空，被维护方对象可以为空。</p></blockquote>

<p>待理解。。。。。。。先挖个坑</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring Jpa执行时的一点小问题]]></title>
    <link href="https://mrfant.github.io/blog/2018/09/03/spring-jpazhi-xing-shi-de-yi-dian-xiao-wen-ti/"/>
    <updated>2018-09-03T21:12:45+08:00</updated>
    <id>https://mrfant.github.io/blog/2018/09/03/spring-jpazhi-xing-shi-de-yi-dian-xiao-wen-ti</id>
    <content type="html"><![CDATA[<p>在使用Spring jpa的时候
当配置文件项</p>

<pre><code class="java">spring.jpa.hibernate.ddl-auto=create 
//或 create-drop
</code></pre>

<p>每次执行项目的时候会出现一个异常：</p>

<pre><code>Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table 'xgwebdb.xiazai' doesn't exist
</code></pre>

<p>这是因为每次hibernate建表前要把原先的表删除，即执行类似以下语句：</p>

<pre><code class="sql">Hibernate: drop table if exists authority
</code></pre>

<p>如果这个表有外建，就要先把外建约束删除，即先执行以下语句：</p>

<pre><code class="sql">Hibernate: alter table xiazai drop foreign key FKtovauwsdqbp01h60ufbs1076f
</code></pre>

<p>也就是说，Spring jpa在配置项为如上设置时，会执行以下流程：</p>

<pre><code>先把表的外建约束删除，然后删除表，然后再建表，最后建立表的外建约束。
</code></pre>

<p>这样一来，配置项为create并且是<strong>第一次执行</strong>的时候，数据库里还没有表，就会出现一次这个异常提示。</p>

<p>而配置项为create-drop时，<strong>每次执行</strong>都会报这个异常</p>

<p>这个错误可不去理会，但需要知晓出现的原因</p>
]]></content>
  </entry>
  
</feed>
